define([
		"dojo/dom-style",
		"Mother1/debug.js",
		"dojo/dom-construct",
		"dojo/_base/window",		
		"dojo/aspect",
		"dojo/on",
		"dojo/dom",
		"dojo/_base/lang",
		"dojo/dom-class",
		"dojo/_base/declare",
		"dojo/date/locale",
		"dijit/registry",
		//----------------forms
		"dijit/form/Form",
		"dijit/form/ValidationTextBox",
		"dijit/form/TextBox",
		"dijit/form/NumberTextBox",
		"dijit/form/SimpleTextarea",
		"dijit/form/CheckBox",
		"dijit/form/DateTextBox",
		"dijit/form/Button",		
		"dijit/form/ComboBox",
		"dijit/Dialog",	
		//----------------- grid
        "dgrid/Editor",
		"dojo/store/Memory",
		"dojo/store/Observable", 
		"dgrid",
		"dgrid/extensions/ColumnResizer", 
		"dgrid/extensions/ColumnReorder", 
		"dgrid/extensions/ColumnHider", 
		"dgrid/Selection",				 
		//---------------- other
		"dijit/layout/TabContainer", 
		"dijit/layout/ContentPane",//--
		"dojo/data/ItemFileReadStore",
		"dojo/_base/declare"],
function(domStyle,Dbg,DomConstruct,Win,Aspect,on,Dom,lang,domClass,Declare,Locale,Registry,
		Form,ValidationTextBox,TextBox,NumberTextBox,Textarea,CheckBox,DateTextBox,Button,ComboBox,Dialog,
		Editor,Memory,Observable,Grid,ColumnResizer,ColumnReorder,Hider,Selection,
		TabContainer,ContentPane,
		ItemFileReadStore,declare){
    // This returned object becomes the defined value of this module
	//return declare("fBuilder",null,{//
var oClassName = declare("fBuilder",null,{//
		//--------------------------------------------------------------------------------------------------
		// Classe form - this class has all properties and methods to work with a form and its fields
		// Constructor:  var baseForm=new fBuilder("Base", "f");//var baseForm has the form with name="Base" and prefix "f"
		//			example: var accProp=new fBuilder("Accordion Properties","ap");
		//     NOTE on prefix:	The id of each field is generated by the class in(addChild) with a sequencial number following the prefix 
		//						This is necessary, to have unique ids for all instances of this class (these Ids will share the same "DOM space").
		//     NOTE on placement:
		//			Everyform will be placed in a contentPane that was its left,top,width,height,borderThickness,typeOfBorder,color
		// form properties:
		//			name - name of the form. Ex:f0.name -->returns "base form" if constructor was var f0=new formConstructor("base form")
		//			formObj - dojo form object
		//			prefix - unique set of chars that will be a prefix to field Ids (this prevent DOM conflicts)
		//			? move - true/false // ex f0.move=true;//default=false =>serve como status para insideWidget()
		//			? fieldDoubleClickEvent - true/false - // true=> widgets/fields will register a doubleClick event to be handled 
		//                externally by insideWidget(). Default is false. ex f0.fieldDoubleClickEvent=true;
		//
		// form methods:
		//			<to be implemented> serialize() - returns JSON string with the form representation (from that we can rebuild it) - to export the form itself
		//			<to be implemented> parse(JSON_formVar) - rebuilds form from JSON string - to import the form itself
		//			<to be implemented> serializeContent() - returns JSON string with the form content (values of each form field) - to export form content
		//			<to be implemented> parseContent(JSON_Var) - fills form with values from JSON_var - to import form content
		// form field properties:
		// reference by order in the form (quase nunca são usados externamente. Devem ser transformados em métodos internos da classe)
		//		Get
		//			field(i).<first level field property> ex:f0.field(0).props.id -->returns id of first field in order
		//			field(i).style.<style attribute> ex:field(0).props.style.left-->returns int with left position of field in order if fields does not exist returns "undefined"
		//			widget(i) - returns the widget with array order i. ex. 	f0.widget(i).on("click",mouseUpOnWidget);
		//		Set (nenhum destes é usado em dojoWidgetsDnd15.html)
		//			setFieldLeft(i,xleft) ex:f0.setFieldLeft(5,547)  -->sets left coordinate of field of order 5 to 547 ex2:f0.setFieldLeft(0,avatar.style.left); 
		//			setFieldTop(i,xTop) ex:f0.setFieldLeft(5,205)  -->sets top coordinate of field of order 5 to 205    ex2:f0.setFieldTop(0,avatar.style.top); 
		//			setFieldValue(i,xValue) ex:f0.setFieldValue(5,"John)  -->sets value for field of order 5 to "john"    
		// reference by id
		//		Get
		//			fieldById(xId).<property> returns property for id=xId if field does not exist returns "undefined"
		//				examples:
		//					xType=f0.fieldById(xId).type;               //level 0
		//					xName=f0.fieldById(xId).props.name;			//fist level 
		//					xWidth=f0.fieldById(xId).props.style.width;	//second level
		//					Note: to get button captions use the "label" property (dojo) (set with "value" and get with "label")
		//			fieldShownById(xId) returns the value actually shown on screen (notice that this may be different from fieldById(xId).<property>) 
		//
		//		Set 
		//			setFieldProps(xId,{json string with properties})  ex:f0.setFieldProps(xId,{name:xName,value:xValue,tabindex:xTabindex,required:xRequired,missingMessage:xMissingMessage,regExp:xRegExp,invalidMessage:xInvalidMessage}); 
		//				-->properties: name,value,tab_order,tabindex,required,missingMessage,label,regExp,invalidMessage,clickCode,preCode,posCode
		//              NOTE: for button widgets:
		//					to define a button behavior use the property "clickCode". Its content are javascript lines that will be evaluated
		//						EXAMPLE: f0.setFieldProps("f7",{clickCode:"var x=55;alert('Hello '+2*x);"});  
		//					to disable the click action use the property disable (do not  confuse with disabled - that will disable the whole button)
		//						ex:	f0.setFieldProps("f7",{disable:true});  //disable click code without affecting the code 
		//					to disable the whole button use the property disabled (different from above)
		//						ex:	f0.setFieldProps("f7",{disabled:true});  //disable the whole button 
		//					to change the button "label"(dojo) use the "value" property (specific to Mother)
		//						ex:	runDesign.setFieldProps("rd1",{value:"Design Mode"}); //changes button's label to "Design Mode"
		//						to get use "label" (mother not simetric here...)
		//			setFieldStyle(xId,{json string with properties})  ex: f0.setFieldStyle(xId,{width:xWidth}); 
		//				-->properties:left,top,width,height  
		// reference by Name
		//		Get
		//			fieldByName(xName).<property> returns property for id=xId if field does not exist returns "undefined"
		//				examples:
		//					x11=fBase.fieldByName("tot").props.preCode
		//					xType=fBase.fieldByName("tot").type;				//level 0 
		//					xName=fBase.fieldByName("tot").props.posCode;		//first level
		//					xWidth=fBase.fieldByName("tot").props.style.width;	//second level
		//		Set 
		//			setFieldPropsByName(xName,{json string with properties})  
		//				-->properties: name,value,tab_order,tabindex,required,missingMessage,label,regExp,invalidMessage,clickCode,preCode,posCode
		//					ex: fBase.setFieldPropsByName("tot",{preCode:"set('Mon','xx-->');"});
		//				-->property disableChangeCode (for comboBox) - disables que ChangeCode event if set	
		//					ex: menuToolBox.setFieldProps("menutb2",{disableChangeCode:true}); //2	
		//					NOTE: In some cases we may want to use a comboBox to change one of the values in the comboBox itemStore.
		//						  we can achieve this with the comboBox properties "changeCode" and "posCode" how ?
		//	var xComboArr=readMenuTxt();//loads the items returning an array of objects in the form [{name:menu1},{name:menu2},...{name:menu9}]
		//	menuToolBox.addChild("comboBox",{left:5,top:5,value:xComboArr[0].name,changeCode:"zOption=z.getMenuChoice(this.value,xComboArr);",posCode:"z.updateHtmlMenu(this.value,zOption);",comboArr:xComboArr,width:130,height:20,title:"Choose the text for the link menu..."}); //2	
		//  NOTE A)When combo content changes the method getMenuChoice will returns the order of the choice (comparing "this value" with xComboArr content
		//	NOTE B)When focus leaves the comboBox posCode (onBlur)will trigger running z.update() that can change the html for order zOption. One problem may arise:
		//			In some cases after "onBlur" we still have a "onChange" event. We can prevent this disabling changeCode ("onChange") inside posCode
		//			for instance, placing the disable code inside z.updateHtmlMenu()--> menuToolBox.setFieldProps("menutb2",{disableChangeCode:true}); //2				
		//					
		//			setFieldStyleByName(xName,{json string with properties})  ex: fBase.setFieldStyleByName("tot",{width:xWidth}); 
		//				-->properties:left,top,width  
		// methods:
		//			totObjects() - returns an int with the total number of fields in the form
		//			tot(xType) - returns an int with the total number of fields type=xType // ex f0.tot("textBox") 
		//				available types: textBox,label,numberBox,textArea,checkBox,dateBox,button,comboBox,grid,tabs
		//			locateOrderById("f0") - returns field series order-> nofind=>-1
		//			locateOrderByName("customer_name") - returns field series order -> nofind=>-1
		//			locateIdByName(xName);//returns the id of a certain xName.  If it doesn't exists return "";
		//				ex:	xId=fBase.locateIdByName(xName); //xId will be "" if xName does not exist
		//			unVisibleById("f1") - poe o field "f1" invisível
		//			visibleById("f1") - poe o field "f1" visivel
		//			addChild(xType,{json string with properties})  
		//				builds a(default) field of type=xType in the form position left,top with all other properties in json
		//				available types:textBox,label,numberBox,textArea,checkBox,dateTextBox,button,comboBox,grid,tabs
		//				Note for addchild: Widgets will be created inside a for with id=<prefix>+"0". The first widget will get 
		//						the id=<prefix>+"1" the second <prefix>+"2" and so on.
		//				-->properties:left,top,width,value,id,required,missingMessage,regExp,invalidMessage  
		//				-->Examples:
		//					accProp.addChild("label",{left:15,top:2,value:"TEXTBOX",width:100}); //ap1
		//					accProp.addChild("label",{left:0,top:30,value:"Name",width:50}); //ap2
		//					accProp.addChild("textBox",{left:45,top:30,width:94,value:xName}); //ap3 <---------------
		//					f0.addChild("button",{left:340,top:80,value:"Calculator",width:100,height:49,clickCode:"var x=55;alert('Hello '+2*x);"});   //7
		//				-->Note: the property value="@|"  has a special meaning:
		//						value=order of type in form.(first textbox will be "textBox1", second "textBox2" and so on).
		//					    example: dijitObj=f0.addChild(xFieldType,{left:xleft,top:xtop,value:"@|"}); 
		//				-->Note for button widgets: the property clickCode should contain the javascript lines that will be evaluated on runtime
		//						Example:f0.addChild("button",{left:340,top:80,clickCode:"var x=55;alert('Hello '+2*x);"});   
		//				-->Note for button widgets: the property disable=true will disable the click button without affecting the javascript code that may exist in clickCode
		//						Example:f0.addChild("button",{left:340,top:80,clickCode:"var x=55;alert('Hello '+2*x);",disable:true}); //the click will not work
		//							later in the code: f0.setFieldProps("f7",{disable:false}); //will enable the javascript code in clickCode
		//				-->Notes for grid widgets: 
		//						Grids have exclusive properties such as: 
		//								headers:"<name 1>,<name 2>,...,<name k>" //a string with a label for each column
		//								colTypes:"<type 1>,<type 2>,...,<type k>" //a string with the type (from set text,numberBox,comboBox,dateTextBox) for each column
		//					            colTypes can have an associated column length (a slash followed by an integer)
		//									colTypes:"<type 1>/<len 1>,<type 2>/<len 2>,...,<type k>/<len k>" //type and column length
		//								showId:true/false - default is true, meaning that the index of each row (idCol) will be shown
		//						exemples:
		//						 f0.addChild("grid",{left:80,top:50,width:510,height:150}) //it will make a grid with columns (showing idCol) that will fill the available width (60px per column)
		//						 f0.addChild("grid",{showId:false,left:80,top:50,width:510,height:150}) //same as above but not showing idCol
		//						 f0.addChild("grid",{left:80,top:50,width:510,height:150,headers:"#,Name,Value,subValue"});//headers specified (idCol shown)
		//						 f0.addChild("grid",{showId:false,left:80,top:50,width:510,height:150,headers:"Name,Value,subValue"}); //same as above but not showing idCol
		//							in above exemples width of columns where automatic - in next examples we will set width for each column
		//						 f0.addChild("grid",{showId:false,left:80,top:50,width:510,height:150,headers:"Name,Value,subValue",colTypes:"text/100,numberBox/30,text/100"}); 
		//						 f0.addChild("grid",{left:80,top:50,width:510,height:150,headers:"#,Name,Value,subValue",colTypes:"text/5,text/100,numberBox/20,text/100"}); //6 Test OK
		// 				
		//			To collect values:
		//				var xChoice=layoutToolBox.fieldShownById("layouttb4");//checks what's in combobox
		//
		//
		//			destroyFields() //clears all widgets/fields of a form (clear=destroy widgets)						
		//				-->Example: accProp.destroyFields();//remove all fields for form accProps
		//
		//		 	addExternal(xObj,xLeft,xTop) - places an external object xObj visually inside the form and in positions xLeft,xTop - No administration 
		//				-->Example  layoutToolBox.addExternal(cPal1,4,160); xObj can be a  widget or a domNode. xObje must be in DOM for this to work
		//
		//			<to be implemented> alignVertical(xSnap) - uses topest field as a reference and all fields within xSnap vertical distance will be aligned vertically
		//			<to be implemented> alignHorizontal(xSnap) - uses leftest field as a reference and all fields within xSnap horizontal distance will be aligned horizontally
		// 
		// Widgets that accept event properties - properties that receive code
		//		textBox 	- accepts the properties preCode and posCode
		//		numberBox 	- accepts the properties preCode and posCode
		//		button 	- accepts the property clickCode
		//		comboBox 	- accepts the properties preCode and posCode (Note: posCode is onChange )
		//
		//---------------------------------------------------------------------------------------------
		//serializatrion http://www.sitepen.com/blog/2012/01/05/native-json-parsing-in-dojo/
		//use  f0.name="f0"; pede o total de objectos do form f0.totObjects(), junta uma label: f0.addChild(1), pede o tot de textboxes:f0.tot(0)
		// como referimos um determinado visual object ? 
		//	1-por ordem na série de fields ---> arrObj[5].props.id   dá o id do 5º field da série
		//  2-pelo id do field (atribuido na fabricação)
		//		f0.child(5).title="textBox1" ou f0.child(5).name="nome_do_cliente" ou
		// 		ou fo.child(5).value="Ambrósio" ou fo.child("nome_do_cliente").value="Ambrósio"
		//  falta:
		//		delete of a field (Visual Form Builder)
		//		alignment of fields (vertically and horizontally)
		//      import, export (form)
		//      import, export (content)
		//-----------------------------------------------------------------------------------------------------------
		// Nota:Cada widget/field que é acrescentado ao form com o method addChild() é por default conectado a um doubleclick event
		//		O handler do double click event de cada field é insideWidgetMove(xId) para o caso de move=true
		//-----------------------------------------------------------------------------------------------------------
		// Index of methods (5+3+5+13+17+14+2=59):
		//		constructor: function(name,prefix,args)//builds the form par1=name with the unique prefix par2=prefix with its parameters in the args object
		//      ----------------------------------------------- FORM MAINTENANCE METHODS (5) --------------
		//		setTemplate:function(xTemplate){// updates pane and all widgets with new template
		//		setFloatTitle:function(xTitle){// for floating forms ("modal" or "nonModal") updates the dialog title (initially set to the form  name)
		//		showForm:function(xTitle){// showsup  a "silent" form - only works for floating forms
		//		hideForm:function(xTitle){// hide  a form - only works for floating forms
		//		destroyFields:function(){	//clear all fields from a form TO BE TESTED
		//      ----------------------------------------------- IMPORT/ EXPORT METHODS (3)--------------		
		//		formDsgn2Json:function(){// buils a JSON representation of the current form  - current version does not include grid nor tabs 
		//      *** NOTE ****: the peer of the above method is in class json2FormDsgn2 ->buildNoWidgets: function(xName,xPrefix,xFloatF ) and buildWidgets:function(objForm)
		//		json2FormContent:function(arrObjJson){// imports (loads) content data into the current form - TBD
		//		formContent2Json:function(){// exports  content data of the current form into a Json object
		//      ----------------------------------------------- widgets CREATION methods (5)-----------------------------------------------------------------------------------------
		//		buildJSON_var:function(xType,xOrder,xOrderInType,xAllProps){//builds JSON_var -used by json2FormDsgn2.buildWidgets(objForm) and this.buildWidget(JSON_var) 
		//		buildWidget:function(JSON_var){//returns dijitObj with dijit object corresponding to JSON_var
		//      prepareAllProps:function(xId,options){//sets first level properties for field with Id=xId TO BE DISCARDED
		//		allProps:function(){//return the super set of all MotherLib properties for all widgets
		//      addChild:function(xType,options){//builds a(default) field of type xType in the form position xLeft,xTop. Ex dijitObj=f0.addChild(xInt,xleft,xtop);
		//      ----------------------------------------------- widgets UPDATE methods (13)-----------------------------------------------------------------------------------------
		//      Setting methods
		//			setFieldProps:function(xId,options){//sets first level properties for field with Id=xId
		//			setFieldStyle:function(xId,options){//sets second level properties for field with Id=xId
		//			setFieldPropsByName:function(xName,options){//the same as setFieldProps but by Name
		//			setFieldStyleByName:function(xName,options){//the same as setFieldStyle but by Name
		//		Getting methods
		//			fieldById:function(xId){// gets properties from a field identified by its Id (using hierarquical access (x.prop1.prop2..).
		//			fieldByName:function(xName){//gets properties from a field identified by its name (using hierarquical access (x.prop1.prop2..).
		//			fieldShownById:function(xId){// returns the value actually shown on screen (notice that this may be different from fieldById(xId).<property>)
		//			fieldShownByName:function(xName){//the same as fieldShownById() but byName (notice that this may be different from fieldById(xId).<property>)
		//		visibleById:function(xId){// sets a field identified by its Id as visible. 
		//		unVisibleById:function(xId){// sets a field identified by its Id as invisible.  
		//		addExternal:function(xObj,xLeft,xTop){// places an external object visually inside the form and in positions xLeft,xTop 
		//		compensationAll:function(){//Necessary because by some reason button width/height need to be set after widget DOM connection (not before this)
		//		compensationButton:function(xOrder){//HANDLE WITH CARE use only in Buttons !!!
		//      ------------------------------------------------- INTERNAL methods (17)-----------------------------------------------------------------------------------------
		//		totObjects:function(){//returns the total number of widgets in the current form
		//		maxTot:function(xType){//gets the highest number of fields of xType 
		//		counterIndexMig:function(xType){//MIGUEL's VERSION FOR gets the index of type=xType in counter[] TO BE TESTED
		//		counterIndex:function(xType){//gets the index of type=xType in counter[] 
		//		field:function(xOrder){// gets properties from a field identified by its sequencial order number (using hierarquical access (x.prop1.prop2..).  
		//		widget:function(xOrder){// gets the DOJO widget identified by its sequencial order number (using hierarquical access (x.prop1.prop2..).  
		//		tag:function(xOrder){// gets the Tag (true/false) for xOrder   
		//		setTag:function(xOrder,xTrueFalse){// gets the Tag (true/false) for xOrder   
		//		locateOrderById:function(xId){// returns the sequencial order number for the field from its Id.
		//  	locateOrderByName:function(xName){// returns the sequencial order number for the field from its name.
		//		locateIdByName:function(xName){// returns the Id for the field that has name=xName
		//		snapToGrid:function(xVal){ //transform the input number xVal into a number according to a gridPattern
		//		get:function(xName){//get the value of...
		//		set:function(xName,xNew){//Set the field with name xName with the a new value xNew..
		//		adjust_display:function(xType){//changes the display position of some widgets making adjustments in the l,t,w and h coordinates
		//		placeFormInPane:function(floatF,xLeft,xTop,xWidth,xHeight,borderThickness,borderType,xColor,xSilent){//places the form in pane xPaneId. 
		//		setCallBack:function( theCallBackObj, dijitObj, sOnAction ){//To avoid eval calls when unecessary (MIGUEL)
		// ---------------------------------------------------- DOJO WIDGETS DEFAULTS (14  11+3)---------------------------------------------------------------------------
		//		JSON_Form: function(xId){//prepares properties object for DOJO form
		//		JSON_Default_TextBox: function(xOrder,xTextBoxOrder,xProps){//Order within TextBoxes,xProps
		//		JSON_Default_Label: function(xOrder,xLabelOrder,xProps){//Order within labels,xProps
		//		JSON_Default_NumberBox: function(xOrder,xNumberBoxOrder,xProps){//Order within NumberBoxes,xProps
		//		JSON_Default_TextArea: function(xOrder,xTextAreaOrder,xProps){//Order within TextAreas,xProps
		//		JSON_Default_CheckBox: function(xOrder,xCheckBoxOrder,xProps){//Order,Order within checkBoxes,xProps
		//		JSON_Default_DateTextBox: function(xOrder,xDateTextBoxOrder,xProps){//Order,Order within dateTextBoxes,xProps
		//		JSON_Default_Button: function(xOrder,xButtonOrder,xProps){//Order,Order within buttons,xProps
		//		JSON_Default_Combo: function(xOrder,xComboOrder,xProps){//Order,Order within comboBoxes,xProps
		//		JSON_Default_dgrid: function(xOrder,xGridOrder,xProps){//Order,Order within grids,xProps
		//		JSON_Default_Tabs: function(xOrder,xTabsOrder,xProps){//Order,Order within tabs(s),xProps
		//		makeColumns:function(showId,xCols,xColumns){//used in JSON_Default_dgrid -> # of columns, JSON Object to return
		//		updateHeader:function(xCol,xHeader,xType,xColumns){//used in JSON_Default_dgrid ->Changes the header of # col=xCol to text xHeader, and to type=xType for column object=xColumns 
		//		makeData:function (xRows,xCols,xDataArr){//used in JSON_Default_dgrid -> builds a default matrix of # of rows x #cols, returning JSON Object= xDataArr
		//--------------------------------------------------------------------------------------------------------------------------------------------------------------
		//      test(x) //dummy function 
		//------------------------------------------ STATIC METHODS (2)----------------------------------------------------------------------
		//      FBuilder.checkExist= function(xId) {//checks the existence of form with prefix=xId - returning true/false
		//		FBuilder.destroy= function(xId) {//destroy FBuilder FORM xId- destroy all widgets and cleans the DOM for Form with prefix=xId 
		//-----------------------------------------------------------------------------------------------------------------------------------
		name:null,
		prefix:null,		
		counter:[0,0,0,0,0,0,0,0,0,0,0], //numer of elements for each type
		maxCounter:[0,0,0,0,0,0,0,0,0,0,0], //max numer of elements for each type (if one is deleted the numbering goes on..)
		highestOrder:0, //absolute widget counter (incremented by each widgets whatever type)
		//arrObj:[], //array de visual objects properties - arrays are STATIC !!!
		//arrWidgets:[], //array de Widgets
		JSON_f:null,
		formObj:null,
		currentFormNumber:null,
		gridPattern:1,//the snap to grid number. 1=>no transform
		externalCounter:-1, //used in addExternal. Current number to form div DOM id is: <prefix>+"_ext"+<counter>
		xPane:null,//the form's underlaying content Pane - set in placeFormInPane
		xPaneId:null,//the id of the form's underlaying content Pane - set in placeFormInPane
		//------------ mixin parameters ---------
		//viewPort:{l:100,t:100,w:200,h:200},//,floatF:"noFloat"}, //float property options: noFloat-(normal forms), modal-(modal floating form),nonModal-((no modal floating form)
		viewPort:{},
		borderColor:"none",
		borderType:"solid",//solid,dotted,dashed,double,groove,ridge,inset,outset,none
		borderThickness:1,
		template:null,
		//		var _prop=new FBuilder("Properties","_prop",{viewPort:{l:1190,t:5,w:250,h:350},borderColor:"black",borderType:"solid",borderThickness:1,template:"A"});
		xStatic:{
			formCount:10,
		},
		static:{
			formCount:-1,
			zarrForms:[],//zarrForms[i] ->it has the prefix for form i - an array with the prefix of each form
			zarrObj:[],//zarrObj[i] ->it is for form i (currentFormNumber=i) an array with all an element for each widget - only properties
			zarrWidgets:[],//the same as above ->one element for each widget - the widget itself
			zarrTags:[],//the same as above->one element for each widget a tag (true or false)
			zcounter:[], //zcounter[i] ->it is for form i (currentFormNumber=i) an array with fixed set of one elements/type with the number of widgets of that type
			zmaxCounter:[],//the same as above but the array inside this array element has the next number available for a widget of the type
			//               (if one widget is deleted the numbering goes on..)
		},
		adjust:{button:{l:-3,t:-2,w:-8,h:-9},grid:{l:-7,t:-22,w:0,h:0},tabs:{l:0,t:0,w:0,h:0}}, //because of some unknown reason dGrid shows itself with left added by 7 pixel - o trambolho da grid
		fDialog:null,
		silent:false,
		oDbg:null,
		//-------------------------------------------------------------------------------------------
		constructor: function(name,prefix,args){ //builds the form par1=name with the unique prefix par2=prefix with its parameters in the args object
		//-------------------------------------------------------------------------------------------
		//Parameters - name - the form name
		//			 - prefix - a unique identifier that allow all widgets ids to be unique in ther DOM (prefix+sequencial number)
		//			 - args - a set of flexible parameters that will be mixed into "this".like
		//			 		- wiewport dimensions {l,t,w,h}
		//EXAMPLES
		//   nonFloat without template
		//		var viewPortX={l:50,t:5,w:1250,h:100};
		//		var f0=new FBuilder("form f0","f0",{viewPort:viewPortX,borderColor:"green",borderType:"solid",borderThickness:1});
		//		var _prop=new FBuilder("Properties","_prop",{viewPort:{l:1190,t:5,w:250,h:350},borderColor:"black",borderType:"solid",borderThickness:1});
		//
		//   float - nonModal -with a template
		//		var viewPortX={l:50,t:5,w:1100,h:400,floatF:"nonModal"};
		//		var f1=new FBuilder("form f1","f1",{viewPort:viewPortX,borderColor:"green",borderType:"ridge",borderThickness:1,template:"A"}); //template:"D"form test 
		//
		//   Float, without template and silent -  silent means that the form will only showup after an explicit  order such as 
		//		this._prop=new FBuilder("b)Properties","_prop",{viewPort:{l:100,t:50,w:225,h:365,floatF:"nonModal"},borderColor:"green",borderType:"solid",borderThickness:1,silent:true});
		//
		// ------------------------------------------ END OF EXAMPLES -----------
		//
		// Version 6 Now supports: floating forms, CSS templates and "silent" option
		//   ViewPort parameter has a new floatF property - viewPort:{l:100,t:100,w:200,h:200,floatF:"nonFloat"} (modal or nonModal =>floating forms)
		//		var fx=new FBuilder("Run/design","fx",{viewPort:{l:1180,t:5,w:220,h:299,floatF:"nonModal"},borderColor:"red",borderType:"solid",borderThickness:1});
		//		if the form is floating ("modal" or "nonModal") the dialog title will be the FBuilder name (1st parameter of FBuilder constructor)
		// 		it is possible to change the dialog title with ex: f0.setFloatTitle("abc") (Note:this doesn't change f0.name)
		//
		//   args has a new "template" property (the default is null)
		//     var f0=new FBuilder("Form f0","f",{viewPort:viewPortX,borderColor:"b",borderType:"solid",borderThickness:1,template:"B"});//default template:null
		//     All templates for all widgets are now defined in a single Mother.CSS file - this allow different templates for different forms in the same Mother app
		//     To create new templates, just extend Mother.CSS with the CSS class "Mother_"+<template id>
		//
		//   args has a new "silent" property (true/false - the default is false) that inhibits the form display on screen
		//		to present the form the programmer should use showForm() for floating windows and...
		// NOTE:a) All widgets are build over a dojo form object 
		//		b) All forms (float and nonfloat) are built over a contentPane. 
		//				the contentPane for nonfloat forms is directly connected to the HTML body  (connection done at placeFormInPane
		//				the contentPane for floating forms is placed inside a dojo Dialog box (connection tru appendChild method of Dialog's containerNode  
		//----------------------------------------------------------------------------------------------------------------------------------------------------
			console.assert((args),"MotherLib6.contructor ->args is undefined or false !!!");
			this.oDbg=new Dbg();
			this.oDbg.setThis("MotherLib6");//All debugs within this class will belong to "MotherLib6"
			//alert("!!!!!!!!!!!!!!!!!!!!!!!!!!"+oClassName.property01);//	oClassName.property01=1234;

			this.viewPort={}; //to avoid sharing of object between diferent instances - we want viewPort to be private
			declare.safeMixin(this, args);//args vem na forma {"test1":51,"test2":52,"test3":53} - this does not do the viewport mixin !!! we have to do it now !
			//this first mixing will set this.viewPort with args.viewPort (because at this stage this.viewPort is {}.
			this.viewPort={l:100,t:100,w:200,h:200,floatF:"nonFloat"}; //now that viewport is private, we set its default values. floatF property options: noFloat-(normal forms), modal-(modal floating form),noModal-((no modal floating form)
			declare.safeMixin(this.viewPort, args.viewPort);//finaly we do the viewPort mixin !
			this.name=name;
			this.prefix=prefix;
			//this.JSON_f=this.JSON_Form(name);
			this.JSON_f=this.JSON_Form(prefix);
			//alert("FBUILDER CONTRUCTOR name="+this.name+" prefix="+this.prefix+" viewPort="+JSON.stringify(this.viewPort)+" BType="+this.borderType+" BThickness="+this.borderThickness+" BColor="+this.borderColor);
			this.formObj=new Form(this.JSON_f.props, dojo.doc.createElement("div")); //o 2º param é o DomNode string
			//console.log("FormCount ="+this.static.formCount);
			//alert("Name="+this.name+" prefix="+this.prefix+" BORDER="+this.borderType);
			this.static.formCount+=1;
			this.currentFormNumber=this.static.formCount; //each instance has its own currentFormNumber
			//this.static.zarrForm[this.currentFormNumber]=this.prefix; 
			this.static.zarrForms.push(this.prefix); 
			if(this.oDbg.isDbg("constructor")) this.oDbg.display("Juntou form="+this.prefix+" total de "+this.static.zarrForms.length+" forms!");

			this.static.zarrObj[this.currentFormNumber]=[]; 
			this.static.zarrWidgets[this.currentFormNumber]=[]; 
			this.static.zarrTags[this.currentFormNumber]=[]; 
			this.static.zcounter[this.currentFormNumber]=[0,0,0,0,0,0,0,0,0,0,0]; //numer of elements for each type
			this.static.zmaxCounter[this.currentFormNumber]=[0,0,0,0,0,0,0,0,0,0,0]; //max numer of elements for each type (if one is deleted the numbering goes on..)
			//this.oDbg=new Dbg();
			//this.oDbg.setThis("MotherLib6");//All debugs within this class will belong to "MotherLib6"
			//-------------
			if(this.oDbg.isDbg("constructor")) this.oDbg.display("Prefix="+prefix+" --------->Name:"+this.name+"<--  viewPort="+JSON.stringify(this.viewPort));
			//-----------------------------------------------------
			// Values for floatF: ("nonFloat" => form in pane ), ("modal" =>modal floating form), ("nonModal" => floating form)
			if(this.viewPort.floatF=="nonFloat"){
				this.placeFormInPane(false,this.viewPort.l,this.viewPort.t,this.viewPort.w,this.viewPort.h,this.borderThickness,this.borderType,this.borderColor,this.silent);//places the form f1 in pane xPaneId. If pane does not exist create a new one and places it in a div in the body()	
			}else{//it is modal or nonModal
				//this next line was necessary to prevent error if we changed template in floating forms
			this.placeFormInPane(true,this.viewPort.l,this.viewPort.t,this.viewPort.w,this.viewPort.h,this.borderThickness,this.borderType,this.borderColor,this.silent);//places the form f1 in pane xPaneId. If pane does not exist create a new one and places it in a div in the body()	
				if(this.viewPort.floatF!="modal"&&this.viewPort.floatF!="nonModal"){
					alert("MotherLib6 ERROR: floatF unknown value ("+this.viewPort.floatF+") =>Possible values are:'nonFloat'(form in pane), 'modal'(modal floating form) or 'nonModal'( floating form)");			
				};	
				this.fDialog = new Dialog({
					id   :this.prefix+"_DialogId",
					title: this.name,
					style: "width:"+this.viewPort.w+"px;height:"+this.viewPort.h+"px",
					'class':this.viewPort.floatF//just to use this in CSS with .nonModal_underlay { display:none} (in MotherBuilder.css) MAGIC !!! "modal" makes it modal
					//onShow: function() { domStyle.set(this.containerNode.parentNode,'visibility','hidden'); },
					//onLoad: function() { domStyle.set(this.containerNode.parentNode,{top:'10px', visibility:'visible'}); }	
				});//there is  no dom node with content for the Dialog	
				//this.fDialog.set("content",this.formObj.domNode);	//OLD WORKING BUILD - THE FORM WAS PLACED DIRECTLY OVER THE DIALOG. IT WORKS BUT EXCLUDES the contentPane
				this.fDialog.containerNode.appendChild(this.xPane.domNode);//OK this includes the contentPane - all forms (including floating) will be over a content pane  !!!!!!!!!
				this.fDialog.show(); 
				if(this.oDbg.isDbg("constructor")) this.oDbg.display("*********** MUDA A POSICAO ************");
				domStyle.set(this.fDialog.domNode,'left',this.viewPort.l+'px');//now it is in the DOM
				domStyle.set(this.fDialog.domNode,'top',this.viewPort.t+'px');
				if(this.silent){//showns and hides imediatly to prevent grid problem (no lines...)
					if(this.oDbg.isDbg("constructor")) this.oDbg.display("*************** HIDE para form="+this.prefix);
					this.fDialog.hide(); 		
				};
				
			};
		},//constructor
		
		//----------------------------------------------- FORM MAINTENANCE METHODS (5) --------------
		//-------------------------------------------------------------------------------------------
		setTemplate:function(xTemplate){// updates pane and all widgets with new template
		//-------------------------------------------------------------------------------------------
			//we need to replace the old template if it exists or to add the template if none exist
			// there is a particularity for object button -->it needs compensationButton().
			var dijitObj=null;
			if(this.oDbg.isDbg("constructor")) this.oDbg.display("Inside setTemplate -- xTemplate="+xTemplate);
			var xTotWidgets=this.totObjects(); 
			if(this.template){//one template is set....we need to replace it - the old ("Mother_"+this.template) will be replaced by "Mother_"+xTemplate.
				domClass.replace(this.xPane.domNode,"Mother_"+xTemplate,"Mother_"+this.template);//places the new template xTemplate instead of old this.template
				for(var i=0;i<xTotWidgets;i++){ //replace the old template from every widget
					if(this.static.zarrObj[this.currentFormNumber][i].type=="button"){
						var xId=this.static.zarrObj[this.currentFormNumber][i].props.id;
						var xNode=dojo.byId(xId);
						if(xTemplate){//if we are exchanging for a diferent template replaces
							domClass.replace(xNode.parentNode,"Mother_"+xTemplate,"Mother_"+this.template);//
						}else{//if we are changing to null remove
							domClass.remove(xNode.parentNode,"Mother_"+this.template);//
						};						
						//this.compensationButton(i);//this includes domClass.add
					}else{
						dijitObj=this.static.zarrWidgets[this.currentFormNumber][i];
						domClass.replace(dijitObj.domNode,"Mother_"+xTemplate,"Mother_"+this.template);//
					};
					//dijitObj=this.static.zarrWidgets[this.currentFormNumber][i];		
					//domClass.add(dijitObj.domNode, "Mother_"+this.template);//choose CSS selector from  Mother.CSS
					//var	xId=this.static.zarrObj[this.currentFormNumber][i].props.id;
					//domClass.replace(dijitObj.domNode,"Mother_"+xTemplate,"Mother_"+this.template);//
					//domClass.replace(xId,"Mother_"+xTemplate,"Mother_"+this.template);//
				};	
			}else{//in this case we only have to add
				domClass.add(this.xPane.domNode,"Mother_"+xTemplate);//adds the new template xTemplate 
				for(var i=0;i<xTotWidgets;i++){ //adds the template in every widget
					if(this.static.zarrObj[this.currentFormNumber][i].type=="button"){
						var xId=this.static.zarrObj[this.currentFormNumber][i].props.id;
						var xNode=dojo.byId(xId);
						domClass.add(xNode.parentNode, "Mother_"+xTemplate);//add a class "Mother_x" to the SPAN node thar has .dijitButtonNode
						//this.compensationButton(i);//this includes domClass.add
					}else{
						dijitObj=this.static.zarrWidgets[this.currentFormNumber][i];
						domClass.add(dijitObj.domNode,"Mother_"+xTemplate);//				
					};
				};	

			};
			this.template=xTemplate;//now updates the "template" class property 
			//domClass.add(this.xPane.domNode, "Mother_"+this.template);//add the CSS class "Mother_"+A,B,C,D,E,F to ContentPane - Match with Mother.CSS
			// DO NOT FORGET 	<body class="claro Mother">  IN LEADING HTML !!!!!
			//we should change widgets, treat class replacement and float /nonfloat
		},		
		//-------------------------------------------------------------------------------------------
		setFloatTitle:function(xTitle){// for floating forms ("modal" or "nonModal") updates the dialog title (initially set to the form  name)
		//-------------------------------------------------------------------------------------------
			//if(this.viewPort.floatF=="modal"||this.viewPort.floatF=="nonModal"){//only acts for floating forms !!!
			if(this.fDialog){//only acts if fDialog is non null.
				this.fDialog.set("title",xTitle);
			};
		},
		//-------------------------------------------------------------------------------------------
		showForm:function(xTitle){// showsup  a "silent" form - only works for floating forms
		//-------------------------------------------------------------------------------------------
			if(this.fDialog){//only acts if fDialog is non null.
				this.fDialog.show(); 
				domStyle.set(this.fDialog.domNode,'left',this.viewPort.l+'px');//now it is in the DOM
				domStyle.set(this.fDialog.domNode,'top',this.viewPort.t+'px');			
			};
		},	
		//-------------------------------------------------------------------------------------------
		hideForm:function(xTitle){// hide  a form - only works for floating forms
		//-------------------------------------------------------------------------------------------
			if(this.fDialog){//only acts if fDialog is non null.
					this.fDialog.hide(); 		
			};
		},	
		//-------------------------------------------------------------------------------------------	
		destroy:function(){	//destroy all widgets, the dojo form, the dojo ContentPane and the dojo Dialog if its a floating form
		//-------------------------------------------------------------------------------------------
			alert("vai fazer destroy de name="+this.name+" prefix="+this.prefix);
		},//destroy
		//-------------------------------------------------------------------------------------------	
		destroyFields:function(){	//clears all fields from a form
		//-------------------------------------------------------------------------------------------
			//alert("DESTROY FIELDS FOR FORM="+this.name);
			//precisamos destruir todos os widgets do form
			var xTotWidgets=this.static.zarrObj[this.currentFormNumber].length;

			for(var i=0;i<xTotWidgets;i++){
				//var xId=arrObj[i].props.id;
				var xId=this.static.zarrObj[this.currentFormNumber][i].props.id;
				//alert("---->vai destruir "+xId);
				dijit.byId(xId).destroy();//destroy o widget enquanto dojo.destroy() só destroi o dom node
			}
			//arrObj=[]; //finalmente limpa arrObj		
			this.static.zarrObj[this.currentFormNumber]=[]; //cleans the widgets properties	
			//arrWidgets=[]; //..e limpa arrWidgets
			this.static.zarrWidgets[this.currentFormNumber]=[]; //cleans the widgets themselves	

			counter=[0,0,0,0,0,0,0,0,0,0,0]; //apaga os counters por tipo de objecto
			maxCounter=[0,0,0,0,0,0,0,0,0,0,0]; //apaga os maxCounters por tipo de objecto
			this.highestOrder=0;
			console.log("MotherLib.destroyFields - all from Form "+this.name);
		},//destroyFields	

		//----------------------------------------------- IMPORT/ EXPORT METHODS (3)--------------		
		//-------------------------------------------------------------------------------------------
		formDsgn2Json:function(){// buils a JSON representation of the current form  - current version does not include grid nor tabs 
		//-------------------------------------------------------------------------------------------
			//This method converts a JSON object into a form design;
			var xTotWidgets=this.totObjects();	
			var xRet="{";
			var xType=null;
			//-----------
			var xId=null;
			var xTb_order=null;
			var xName=null;
			var xTitle=null;
			var xStyle=null;
			var xTemp=null;
			//form features: ex: {"fname":fname,"fprefix":fprefix,"fLayout":{"viewPort":{"l":l,"t":t,"w";w,"h":h},"borderColor":bColor,"borderType":bType,"borderThickness":bThickness},
			//                    "widgets":[{"type":"button","props":props1},{"type":"textBox","props":props2}]}
			//	Do not forget that in JSON standard double quotes are mandatory - otherwise 
			//xRet=xRet+'"fName":"'+this.name+'","prefix":"'+this.prefix+'","fLayout":{"viewPort":{"l":'+this.viewPort.l+',"t":'+this.viewPort.t+',"w":'+this.viewPort.w+',"h":'+this.viewPort.h+'},"borderColor":"'+this.borderColor+'","borderType":"'+this.borderType+'","borderThickness":'+this.borderThickness+'}';
			xRet=xRet+'"name":"'+this.name+'","prefix":"'+this.prefix+'","fLayout":{"viewPort":{"l":'+this.viewPort.l+',"t":'+this.viewPort.t+',"w":'+this.viewPort.w+',"h":'+this.viewPort.h+',"floatF":"'+this.viewPort.floatF
						+'"},"borderColor":"'+this.borderColor+'","borderType":"'+this.borderType+'","borderThickness":'+this.borderThickness+',"template":"'+this.template+'"}';
			// until this point - a form without widgets
			
			var k=0;
			//{"name": "joao","widgets": [{"a": "ah"},{"b": "be"}]}
			for(var i=0;i<xTotWidgets;i++){ //extract the content of each widget
				xType=this.static.zarrObj[this.currentFormNumber][i].type;
				//--- commom to all widgets --------------
				xId=this.static.zarrObj[this.currentFormNumber][i].props.id;
				xName=this.static.zarrObj[this.currentFormNumber][i].props.name;
				xTitle=this.static.zarrObj[this.currentFormNumber][i].props.title;
				xTabindex=this.static.zarrObj[this.currentFormNumber][i].props.tabindex;
				xTemp=this.static.zarrObj[this.currentFormNumber][i].props.style;
				xStyle=JSON.stringify(xTemp);
				//----------------------------------------
				if(k==0) xRet+=',"widgets":['; //opens the array of widgets
			
				if(k>0) xRet+=","; //after the first widget we need a comma separator before the next
				xRet+='{"type":"'+xType+'","props":{';
				switch(xType){
					case "textBox":
						var xInvalidMessage=this.static.zarrObj[this.currentFormNumber][i].props.invalidMessage;
						var xMissingMessage=this.static.zarrObj[this.currentFormNumber][i].props.missingMessage;
						var xPreCode=this.static.zarrObj[this.currentFormNumber][i].props.preCode;
						var xPosCode=this.static.zarrObj[this.currentFormNumber][i].props.posCode;
						var xPlaceHolder=this.static.zarrObj[this.currentFormNumber][i].props.placeHolder;
						xRet+='"id":"'+xId+'",'+
							  '"name":"'+xName+'",'+
							  '"title":"'+xTitle+'",'+
							  '"tabindex":"'+xTabindex+'",'+
							  '"style":'+xStyle+','+
							  '"invalidMessage":"'+xInvalidMessage+'",'+				
							  '"missingMessage":"'+xMissingMessage+'",'+
							  '"preCode":"'+xPreCode+'",'+
							  '"posCode":"'+xPosCode+'",'+
							  '"placeHolder":"'+xPlaceHolder+'"}}';								  
						break;
					case "label":
						var xReadOnly=this.static.zarrObj[this.currentFormNumber][i].props.readOnly;
						var xValue=this.static.zarrObj[this.currentFormNumber][i].props.value;
						xRet+='"id":"'+xId+'",'+
							  '"name":"'+xName+'",'+
							  '"title":"'+xTitle+'",'+
							  //'"tabindex":"'+xTabindex+'",'+
							  '"style":'+xStyle+','+
							  '"value":"'+xValue+'",'+
							  '"readOnly":'+xReadOnly+'}}';	//is true/false (has no quotes)		//logical has no ""			
						break;
					case "numberBox":
						var xInvalidMessage=this.static.zarrObj[this.currentFormNumber][i].props.invalidMessage;
						var xPattern=this.static.zarrObj[this.currentFormNumber][i].props.constraints.pattern;
						xRet+='"id":"'+xId+'",'+
							  '"name":"'+xName+'",'+
							  '"title":"'+xTitle+'",'+
							  '"tabindex":"'+xTabindex+'",'+
							  '"pattern":"'+xPattern+'",'+
							  '"style":'+xStyle+','+
							  '"invalidMessage":"'+xInvalidMessage+'"}}';			
						break;
					case "textArea":
						var xPreCode=this.static.zarrObj[this.currentFormNumber][i].props.preCode;
						var xPosCode=this.static.zarrObj[this.currentFormNumber][i].props.posCode;
						xRet+='"id":"'+xId+'",'+
							  '"name":"'+xName+'",'+
							  '"title":"'+xTitle+'",'+
							  '"tabindex":"'+xTabindex+'",'+
							  '"style":'+xStyle+','+
							  '"preCode":"'+xPreCode+'",'+
							  '"posCode":"'+xPosCode+'"}}';	
						break;
					
					case "checkBox":
						var xChangeCode=this.static.zarrObj[this.currentFormNumber][i].props.changeCode;
						var xChecked=this.static.zarrObj[this.currentFormNumber][i].props.checked;
						xRet+='"id":"'+xId+'",'+
							  '"name":"'+xName+'",'+
							  '"title":"'+xTitle+'",'+
							  '"tabindex":"'+xTabindex+'",'+
							  '"style":'+xStyle+','+
							  '"changeCode":"'+xChangeCode+'",'+			
							  '"checked":'+xChecked+'}}';  //is true/false (has no quotes)//logical has no ""					
						break;
/*						
					case "radioButton":
						break;	
*/						
					case "dateTextBox":
						var xInvalidMessage=this.static.zarrObj[this.currentFormNumber][i].props.invalidMessage;
						var xMissingMessage=this.static.zarrObj[this.currentFormNumber][i].props.missingMessage;
						var xPreCode=this.static.zarrObj[this.currentFormNumber][i].props.preCode;
						var xPosCode=this.static.zarrObj[this.currentFormNumber][i].props.posCode;
						var xDatePattern=this.static.zarrObj[this.currentFormNumber][i].props.constraints.datePattern;
						//var xPlaceHolder=this.static.zarrObj[this.currentFormNumber][i].props.placeHolder;
						xRet+='"id":"'+xId+'",'+
							  '"name":"'+xName+'",'+
							  '"title":"'+xTitle+'",'+
							  '"tabindex":"'+xTabindex+'",'+
  							  '"datePattern":"'+xDatePattern+'",'+
							  '"style":'+xStyle+','+
							  '"invalidMessage":"'+xInvalidMessage+'",'+				
							  '"missingMessage":"'+xMissingMessage+'",'+
							  '"preCode":"'+xPreCode+'",'+
							  '"posCode":"'+xPosCode+'"}}';	
						break;					    
						break;
					case "button":
						var xValue=this.static.zarrObj[this.currentFormNumber][i].props.label;
						var xClickCode=this.static.zarrObj[this.currentFormNumber][i].props.clickCode;
						var xOnClick=this.static.zarrObj[this.currentFormNumber][i].props.onClick;
						var xDisable=this.static.zarrObj[this.currentFormNumber][i].props.disable;
						var xDisabled=this.static.zarrObj[this.currentFormNumber][i].props.disabled;
						xRet+='"id":"'+xId+'",'+
							  '"name":"'+xName+'",'+
							  '"title":"'+xTitle+'",'+
							  '"tabindex":"'+xTabindex+'",'+
							  '"style":'+xStyle+','+
  							  '"value":"'+xValue+'",'+
							  '"clickCode":"'+xClickCode+'",'+						  
							  //'"onClick":"'+xOnClick+'",'+			
							 // '"onClick":'+xOnClick+','+			
							  '"disable":'+xDisable+','+		//logical has no ""	
							  '"disabled":'+xDisabled+'}}';		//logical has no ""								
						break;	
					case "comboBox":
						var xPreCode=this.static.zarrObj[this.currentFormNumber][i].props.preCode;
						var xPosCode=this.static.zarrObj[this.currentFormNumber][i].props.posCode;
						var xChangeCode=this.static.zarrObj[this.currentFormNumber][i].props.changeCode;
						var xPlaceHolder=this.static.zarrObj[this.currentFormNumber][i].props.placeHolder;
						xRet+='"id":"'+xId+'",'+
							  '"name":"'+xName+'",'+
							  '"title":"'+xTitle+'",'+
							  '"tabindex":"'+xTabindex+'",'+
							  '"style":'+xStyle+','+
							  '"preCode":"'+xPreCode+'",'+			
							  '"posCode":"'+xPosCode+'",'+			
							  '"changeCode":"'+xChangeCode+'",'+				
							  '"placeHolder":"'+xPlaceHolder+'"}}';							
						break;	
/*						
					case "grid":
						break;
					case "tabs":
						break;	
*/						
					default: alert("MotherLib6.formDsgn2Json "+this.name+": The type "+xType+" is unknown for the time being");	
				};
				k++;
				//console.log("MotherLib6.formDsgn2Json Widget order="+i+" id="+xId+" type="+xType);
				if(this.oDbg.isDbg("formDsgn2Json")) this.oDbg.display("Widget order="+i+" id="+xId+" type="+xType);
			};
			if(k>0){//it existed one widget at least
				xRet+="]}";
			}else{//no widgets
				xRet+="}";
			};
			return xRet;
		},  //formDsgn2Json	
		//      *** NOTE ****: the peers of the above method is in class json2FormDsgn2 ->buildNoWidgets: function(xName,xPrefix,xFloatF ) and buildWidgets:function(objForm)
		//                     to convert a JSON object into a form design, pls use class json2FormDsgn2.js 
		//-------------------------------------------------------------------------------------------
		json2FormContent:function(arrObjJson){// loads content data into the current form
		//-------------------------------------------------------------------------------------------
			//This method converts a JSON object into field content for the current working form
		},	
		//-------------------------------------------------------------------------------------------
		formContent2Json:function(){// exports  content data of the current form into a Json object
		//-------------------------------------------------------------------------------------------
			//This method produces a Json Object with the data from the widgets  of the current working form 
			// The reference for each data item (independet of the form) is a data dictionary reference.
			// The following widgets will be excluded:
			//   		- label and button  - are widgets without DataDictionary content, therefore nothing will be included in the Json
			// 			- radioButton  - Not fully implemented. To be included later in the Json
			// 			- tab  - A container with other widgets inside it. To be included later in the Json
			// 			- grid  - A matrix of data. To be included later in the Json
			//
			// This version is using the field id as a reference (JSON property) - The correct reference should be the dictionary field entry
			//     for each form field we need to have an Dictionary Id TO BE DONE
			//
			// Do not forget that double quotes are necessary in properties and strings, for JSON.parse(xStr) to work
			var xTotWidgets=this.totObjects();	
			var xRet="{";
			var xId=null;
			var xType=null;
			var xValue=null;
			var k=0;
			for(var i=0;i<xTotWidgets;i++){ //extract the content of each widget
				xType=this.static.zarrObj[this.currentFormNumber][i].type;
				xId=this.static.zarrObj[this.currentFormNumber][i].props.id;
				//xValue=this.static.zarrObj[this.currentFormNumber][i].props.value;//if the value is not commited...this will be undefined
				xValue=this.fieldShownById(xId);//this is what's in the screen
				if(xType=="label"||xType=="button"||xType=="radioButton"||xType=="tab"||xType=="grid"){
					console.log("MotherLib6.formContent2Json IGNORED Widget order="+i+" id="+xId+" type="+xType);
				}else{
					k++;
					if(k>1) xRet+=","; //after the first widget we need a comma separator before the next
					if(xType=="checkBox"){
						xRet=xRet+'"'+xId+'":'+xValue;//adds true/false without ""
					}else{
						xRet=xRet+'"'+xId+'":"'+xValue+'"';
					};
				};
			};
			xRet+="}";
			return xRet;
		},//formContent2Json

		//----------------------------------------------- widgets CREATION methods (5)-----------------------------------------------------------------------------------------
		//-------------------------------------------------------------------------------------------
		buildJSON_var:function(xType,xOrder,xOrderInType,xAllProps){//builds JSON_var -used by json2FormDsgn2.buildWidgets(objForm) and this.buildWidget(JSON_var) 
		//-------------------------------------------------------------------------------------------
		//	a method to build  the JSON_var - JSON_var=buildJSON_var(xType,xOrder,xOrderInType,xAllProps); xAllProps is a JSON{} with all possible props 
		//   xOrder - sequential order of widget
		//	xOrderInType - sequential order of widget within type (this.maxTot(xType))
		// all props are:{left:xLeft,top:xTop,width:xWidth,height:xHeight,value:xValue,id:xId,name:xName,
		//     required:xRequired,invalidMessage:xInvalidMessage,missingMessage:xMissingMessage,regExp:xRegExp,
		//     datePattern:xDatePattern,checked:xChecked,onClick:xOnClick,clickCode:xClickCode,preCode:xPreCode,posCode:xPosCode,
		//	   pattern:xPattern,comboArr:xComboArr,disable:xDisable,disabled:xDisabled,title:xTitle,headers:xHeaders,colTypes:xColTypes,showId:xShowId};
		//
		// da lista em addChild ficou de fora:	var xOrder=this.totObjects();
			var JSON_var=null;
			switch(xType){
				case "textBox":
					JSON_var=this.JSON_Default_TextBox(xOrder,xOrderInType,xAllProps);	//Order within Form, Order within TextBoxes,xProps
					break;
				case "label":
					JSON_var=this.JSON_Default_Label(xOrder,xOrderInType,xAllProps);	//Order within Form, Order within Labels,xProps
					break;	
				case "numberBox":
					JSON_var=this.JSON_Default_NumberBox(xOrder,xOrderInType,xAllProps);	//Order within Form, Order within Labels,xProps
					break;
				case "textArea":
					JSON_var=this.JSON_Default_TextArea(xOrder,xOrderInType,xAllProps);	//Order within Form, Order within textAreas,xProps
					break;
				case "checkBox":
					JSON_var=this.JSON_Default_CheckBox(xOrder,xOrderInType,xAllProps);	//Order within Form, Order within checkboxes,xProps		
					break;	
				case "radioButton":
					//TBD
					break;
				case "dateTextBox":
					JSON_var=this.JSON_Default_DateTextBox(xOrder,xOrderInType,xAllProps);	
					break;
				case "button":
					JSON_var=this.JSON_Default_Button(xOrder,xOrderInType,xAllProps);	//Order within Form, Order within Buttons,xProps
					break;	
				case "comboBox":
					JSON_var=this.JSON_Default_Combo(xOrder,xOrderInType,xAllProps);	//Order within Form, Order within comboBoxes, xprops
					break;	
				case "grid":
					JSON_var=this.JSON_Default_dgrid(xOrder,xOrderInType,xAllProps);	//Order within Form, Order within Grids, xprops
					break;
				case "tabs":
					JSON_var=this.JSON_Default_Tabs(xOrder,xOrderInType,xAllProps);	//Order within tabs, Order within Tabs, xProps	
					break;	
				default: alert("fBuilder.buildJSON_var "+this.name+": The type "+xType+" is unknown for the time being");
			};
			return JSON_var;		
		},// end of method.buildJSON_var
		//-------------------------------------------------------------------------------------------
		buildWidget:function(JSON_var){//returns dijitObj with dijit object corresponding to JSON_var
		//-------------------------------------------------------------------------------------------
		//		a method to build  the JSON_var - JSON_var=buildJSON_var(xType,xAllProps); xAllProps is a JSON{} with all possible props 
		//		a method to build widgets on screen using the respective JSON_var BuildWidget(JSON_var) - (JSON_var includes the type in itself)
		//      returns dijitObj
			var xId=JSON_var.props.id;
			var xType=JSON_var.type;
			var dijitObj=null;
			switch(xType){
				case "textBox":
					dijitObj=new ValidationTextBox(JSON_var.props, xId);
					if(JSON_var.props.preCode.length>0){
						var txtBoxId=dijitObj.get("id")
						//handle=on(dijit.byId(txtBoxId),"focus",function(){ //this code runs when "focus" event  triggers
						handle=on(dijit.byId(txtBoxId),"focus",lang.hitch(this,function(){ //this code runs when "focus" event  triggers
							//this.test("Code called when focus event triggers !!!");
							var evalVar=JSON_var.props.preCode; 
							//var z=this.set('test1',23); //ok!!!
							//alert("buildWidget case=textBox/preCode vai avaliar -->"+evalVar);
							eval(evalVar);
						}));
					};
					if(JSON_var.props.posCode.length>0){
						var txtBoxId=dijitObj.get("id")
						//handle=on(dijit.byId(txtBoxId),"blur",function(){ //era "onBlur" com dojo.connect()
						handle=on(dijit.byId(txtBoxId),"blur",lang.hitch(this,function(){ //this code runs when "focus" event  triggers
							var evalVar=JSON_var.props.posCode; //thiz é uma variavel global JavaScript PARA QUE SERVE O THIZ ? SEM THIZ FUNCIONA COM ALERT...
							eval(evalVar);
						}));
					};					
					break;
				case "label":
					dijitObj=new TextBox(JSON_var.props, xId); //o 2º param é o DomNode string			
					break;	
				case "numberBox":
					dijitObj=new NumberTextBox(JSON_var.props, xId); //o 2º param é o DomNode string
					if(JSON_var.props.preCode.length>0){
						var nbBoxId=dijitObj.get("id")
						handle=on(dijit.byId(nbBoxId),"focus",lang.hitch(this,function(){ //this code runs when "focus" event  triggers
							var evalVar=JSON_var.props.preCode; 
							eval(evalVar);
						}));
					};
					if(JSON_var.props.posCode.length>0){
						var nbBoxId=dijitObj.get("id")
						handle=on(dijit.byId(nbBoxId),"blur",lang.hitch(this,function(){ //this code runs when "focus" event  triggers
							var evalVar=JSON_var.props.posCode; //thiz é uma variavel global JavaScript PARA QUE SERVE O THIZ ? SEM THIZ FUNCIONA COM ALERT...
							eval(evalVar);
						}));
					};				
					break;
				case "textArea":
					dijitObj=new Textarea(JSON_var.props, xId);
					if(JSON_var.props.preCode.length>0){
						var txtAreaId=dijitObj.get("id")
						handle=on(dijit.byId(txtAreaId),"focus",lang.hitch(this,function(){ //this code runs when "focus" event  triggers
							var evalVar=JSON_var.props.preCode;
							eval(evalVar);
						}));
					};
					if(JSON_var.props.posCode.length>0){
						var txtAreaId=dijitObj.get("id")
						handle=on(dijit.byId(txtAreaId),"blur",lang.hitch(this,function(){ //this code runs when "focus" event  triggers
							var evalVar=JSON_var.props.posCode; 
							eval(evalVar);
						}));
					};								
					break;
				case "checkBox":
					dijitObj=new CheckBox(JSON_var.props,xId);
					// if(JSON_var.props.changeCode.length>0){
						// console.log("fBuilder.buildWidget checkBox entrou em change code com "+xProps.changeCode); 
						// dijitObj.set("onChange",function(){eval(JSON_var.props.changeCode)}); //xFUNCIONA
					// };	
					if(typeof(JSON_var.props.changeCode)=="string") { //regista o click event(se existir) c/link ao click method do widget e não do node.
						if (  JSON_var.props.changeCode.length>0 ) {
							dijitObj.set("onClick",function(){eval(JSON_var.props.changeCode)}); //xFUNCIONA
						};
					} else {	
						if(this.oDbg.isDbg("addChild")) this.oDbg.display("checkBox ->Vai montar JSON_var.props.changeCode");
						this.setCallBack( JSON_var.props.changeCode, dijitObj, "onClick" );
					};					
					break;	
				case "radioButton":
					//TBD
					break;
				case "dateTextBox":
					dijitObj=new DateTextBox(JSON_var.props, xId); //o 2º param é o DomNode string
					break;
				case "button":
					dijitObj=new Button(JSON_var.props, xId); //o 2º param é o DomNode string
					if(typeof(JSON_var.props.clickCode)=="string") { //regista o click event(se existir) c/link ao click method do widget e não do node.
						if (  JSON_var.props.clickCode.length>0 ) {
							var btnId=dijitObj.get("id");
							if(JSON_var.props.disable){
								dijitObj.set("onClick",function(){;}); //
							}else{
								dijitObj.set("onClick",function(){eval(JSON_var.props.clickCode)}); //xFUNCIONA
							};
							//console.log("MotherLib2 clickcode -->"+dijitObj.get("id"));
							dijitObj.startup();
						};
					} else {	
					//setCallBack:function( theCallBackObj, dijitObj, sOnAction ){
					
						if(this.oDbg.isDbg("addChild")) this.oDbg.display("1)Vai montar JSON_var.props.clickCode");
						this.setCallBack( JSON_var.props.clickCode, dijitObj, "onClick" );
					};
					//----------NO EVAL TREST----------------------------------------------------------------
				/*	
					if(typeof(JSON_var.props.clickCode)!="string"){ //regista o click event(se existir) c/link ao click method do widget e não do node.
						if(this.oDbg.isDbg("addChild")) this.oDbg.display("1)Vai montar JSON_var.props.clickCode");
						// TEMPLATE { func: this.z.testSave, thiz: this , parms: { ...} }
						var pointer= JSON_var.props.clickCode.func;
						var thiz2= JSON_var.props.clickCode.theThis;
						var parms= JSON_var.props.clickCode.parms;
						var localCallback= function( ) {
							if (  thiz2 ) {
								console.log("A)@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  EXISTE ENVIRONMENT");
								pointer.call(thiz2, parms );
							} else {
								console.log("B)@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  NAO EXISTE ENVIRONMENT");
								pointer(parms);
							};
						};
						//var abc=function(){alert("ABC")};
						
						if(this.oDbg.isDbg("addChild")) this.oDbg.display("3)----------------------------------------------vai fazer set");
						dijitObj.set("onClick",  localCallback ); //xFUNCIONA
						if(this.oDbg.isDbg("addChild")) this.oDbg.display("4)----------------------------------------------JA FEZ set");

						dijitObj.startup();
					};
					//----------NO EVAL TREST----------------------------------------------------------------
				*/	
					break;	
				case "comboBox":
					dijitObj=new ComboBox(JSON_var.props, xId); //o 2º param é o DomNode string
					if(JSON_var.props.preCode.length>0){
						dijitObj.set("onFocus",function(){eval(JSON_var.props.preCode)}); //xFUNCIONA
					};
					if(JSON_var.props.changeCode.length>0){
						//console.log("fBuilder.addChild comboBox entrou em change code com "+xProps.changeCode); 
						dijitObj.set("onChange",function(){eval(JSON_var.props.changeCode)}); //xFUNCIONA
					};					
					if(JSON_var.props.posCode.length>0){//no caso de comboBox - poscode==onChange
						//console.log("entrou em pos code"); 
						console.log("fBuilder.addChild comboBox entrou em pos code com "+xProps.posCode); 
						dijitObj.set("onBlur",function(){eval(JSON_var.props.posCode)}); //xFUNCIONA
					};						
					dijitObj.startup();
					break;	
				case "grid":
					//xLeft=xLeft-7;////because of some unknown reason dGrid shows itself with left added by 7 pixel 
					//JSON_var.props.style.left=+this.gridLeft;
				//JSON_var.props.style.left=+this.adjust_display(xType).l;
					//xTop=xTop-22; //because of some unknown reason dGrid shows itself with top added by 22 pixel 
					//JSON_var.props.style.top=+this.gridTop;
				//JSON_var.props.style.top=+this.adjust_display(xType).t;
					dijitObj = new Declare([Grid, ColumnReorder, ColumnResizer, Hider,Selection])(JSON_var.props, xId);
					break;
				case "tabs":
					dijitObj = new TabContainer(JSON_var.props,xId); //tb funciona se tirar xId....
					var tab1 = new ContentPane({title: "tab1",content:"Tab1 content"});
					var tab2 = new ContentPane({title: "tab2",selected : true, content:"Tab2 content"});
					var tab3 = new ContentPane({title: "tab3",content:"Tab3 content"});
					dijitObj.addChild( tab1 );
					dijitObj.addChild( tab2 );
					dijitObj.addChild( tab3 );
					//Tabs will be placed directly over the contentPane - not inside the form that is over the contentPane		
					break;	
				default: alert("fBuilder.buildWidget "+this.name+": The type "+xType+" is unknown for the time being");
			};	
			return dijitObj;//agora com dijitObject na mão podemos fazer as maiores barbaridades
		},// end of method buildWidget
		//-------------------------------------------------------------------------------------------
		prepareAllProps:function(xId,options){//sets first level properties for field with Id=xId TO BE DISCARDED
		//-------------------------------------------------------------------------------------------
			//Ex alert("prepareAllProps ->"+JSON.stringify(f0.prepareAllProps("abc",{left:69,top:26,invalidMessage:"Please take care..."})));

			var xProps={left:0,top:0,width:0,value:"",id:"",name:"",required:false,invalidMessage:"Error...please correct",missingMessage:"Must have a value !",regExp:"[^\t]*",
				datePattern:"dd/MM/yyyy",checked:false,onClick:"",clickCode:"",preCode:"",posCode:"",
				pattern:"#######",comboArr:"",disable:false,disabled:false,title:"@|",headers:"",colTypes:"",showId:true};
			//var a = { b:"c", d:"e" };
			//lang.mixin(a, { d:"f", g:"h" });
			//console.log(a); // b:c, d:f, g:h
			xRet=lang.mixin(xProps, options);//options is an object with a subset of xProps that will be mixed in xRet
			xRet.id=xId;
			return xRet;
		},
		//-------------------------------------------------------------------------------------------
		allProps:function(){//return the super set of all MotherLib properties for all widgets
		//-------------------------------------------------------------------------------------------
			var xAllProps={left:0,top:0,width:0,height:0,value:"",id:"",name:"",required:false,invalidMessage:"Error...please correct",missingMessage:"Must have a value !",regExp:"[^\t]*",
				datePattern:"dd/MM/yyyy",checked:false,onClick:"",clickCode:"",preCode:"",posCode:"",changeCode:"",
				pattern:"#######",comboArr:"",disable:false,disabled:false,title:"@|",headers:"",colTypes:"",showId:true,placeHolder:""};		
			return xAllProps;
		},
		//-------------------------------------------------------------------------------------------
		addChild:function(xType,options){//builds a(default) field of type xType in the form position xLeft,xTop. Ex dijitObj=f0.addChild(xInt,xleft,xtop);
		//-------------------------------------------------------------------------------------------
			var xAllProps={left:0,top:0,width:0,height:0,value:"",id:"",name:"",required:false,invalidMessage:"Error...please correct",missingMessage:"Must have a value !",regExp:"[^\t]*",
				datePattern:"dd/MM/yyyy",checked:false,onClick:"",clickCode:"",preCode:"",posCode:"",changeCode:"",
				pattern:"#######",comboArr:"",disable:false,disabled:false,title:"@|",headers:"",colTypes:"",showId:true,placeHolder:""};
			xAllProps=lang.mixin(xAllProps, options);//options is an object with a subset of xAllProps that will be mixed in xAllProps
			var dijitObj;
			var JSON_var;
			var xId=xAllProps.id;

			if(xId.length==0){//it's up to this method to propose the next highest order (with deletes we can have holes in the numbering)
				this.highestOrder++;
				xId=this.prefix+this.highestOrder;
				xAllProps.id=xId;
				//console.log("Novo addChild xId="+xId);
			}
			var xOrder=this.totObjects();
			var xIndex=this.counterIndex(xType);
			this.static.zcounter[this.currentFormNumber][xIndex]+=1;
			this.static.zmaxCounter[this.currentFormNumber][xIndex]+=1;
			var xOrderInType=this.maxTot(xType);
			if(this.oDbg.isDbg("addChild")) this.oDbg.display("BUILD "+xType+": dentro do form "+this.name+" vai construir com a ordem "+this.totObjects()+". Vai ser o #"+this.maxTot(xType));
			//With xType and  JSON_var it should build the widgets on screen
			//we need to separate 2 functionalities: 
			//		a method to build  the JSON_var - JSON_var=buildJSON_var(xType,xAllProps); xAllProps is a JSON{} with all possible props 
			//		a method to build widgets on screen using the respective JSON_var BuildWidget(JSON_var); (JSON_var includes the type in itself)
			// widget={}
			// widgets["textBox"]={}
			//return xProps;
			JSON_var=this.buildJSON_var(xType,xOrder,xOrderInType,xAllProps);//builds JSON_var to be used by buildWidget(xType,JSON_var) 
			dijitObj=this.buildWidget(JSON_var);//JSON_var includes type in itself
			
			//--------------------------------------- AGORA SIM: O "NACIONAL TRAMBOLHISMO" -----------------------------------------------------------------------------------------------
			if(xType=="tabs"){//Tabs are placed directly over the contentPane - not inside the form that is over the contentPane
				var dijitNode=dijit.byId(xId).domNode; //dijit.byId returns a handle to the object= a javascript object, that has a domNode property
				var paneNode = dojo.byId(this.xPaneId); //Returns the DOM node of the object this.xPane
				paneNode.appendChild(dijitNode);
			}else{//all widgets will be placed over the form, except tabs
				this.formObj.domNode.appendChild(dijitObj.domNode) //this places the widget inside the form	
			};
			this.static.zarrObj[this.currentFormNumber].push(JSON_var);
			this.static.zarrWidgets[this.currentFormNumber].push(dijitObj);		
			if(xType=="grid"){//só aqui o DOM está formado !!!daí a barriga
				//var xLeft=parseInt(dijitObj.style.left)+this.gridLeft;//because of some unknown reason dGrid shows itself with left added by 7 pixel  - ONLY FOR DISPLAY EFFECTS 
				var xLeft=parseInt(dijitObj.style.left)+this.adjust_display("grid").l;//because of some unknown reason dGrid shows itself with left added by 7 pixel  - ONLY FOR DISPLAY EFFECTS 
				//var xTop=parseInt(dijitObj.style.top)+this.gridTop;////because of some unknown reason dGrid shows itself with top added by 22 pixel - ONLY FOR DISPLAY EFFECTS 
				var xTop=parseInt(dijitObj.style.top)+this.adjust_display("grid").t;////because of some unknown reason dGrid shows itself with top added by 22 pixel - ONLY FOR DISPLAY EFFECTS 
				domStyle.set(xId,"left",xLeft+"px");//adds screen deviation to left grid coordinate
				domStyle.set(xId,"top",xTop+"px");//adds screen deviation to top grid coordinate
				domStyle.set(xId,"width",dijitObj.style.width);//changes left FUNCIONA!
				domStyle.set(xId,"height",dijitObj.style.height);//changes left FUNCIONA!
				for (var i=0;i<dijitObj.lenArr.length;i++){
					//console.log("i="+i+" header"+dijitObj.columns.properties[i].name+"-------->"+dijitObj.lenArr[i]);
					var xProp=(dijitObj.showId) ? "col"+i:"col"+(i+1);
					//console.log("i="+i+" field="+xProp+"-------->"+dijitObj.lenArr[i]);
					var xStyleStr="width:"+dijitObj.lenArr[i]+"px";
					//dijitObj.styleColumn("col1", "width:30px");// set width for column with id="idCol"
					dijitObj.styleColumn(xProp, xStyleStr);// set width for column with id="idCol"
				};
				dijitObj.startup();
			};	
			if(xType=="tabs"){//to avoid the 3 bars problem in tabs we need  to make a startup to the underlaying contentPane (xPane - set in placeFormInPane)
				this.xPane.startup();//if this is active the width will be the container width
				dijitObj.startup();
				dijitObj.resize(); //this is necessary to eliminate the 3 top bars on floating forms
				//if(this.oDbg.isDbg("addChild")) this.oDbg.display("-------------->em tabs fez startup de dijitObj,xpane e fDialog");//ill working 3 bars
			};
			if(xType=="button"){//to assure that button height will be show - should run after this.static.zarrObj and this.static.zarrWidgets
				//alert("button - to do button compensation order="+xOrder);
				this.compensationButton(xOrder);//this does not deal with domClass !!!
				var xNode=dojo.byId(xId);
				domClass.add(xNode.parentNode, "Mother_"+this.template);//add a class "Mother_x" to the SPAN node thar has .dijitButtonNode
			}else{//for all other widgets...	
				domClass.add(dijitObj.domNode, "Mother_"+this.template);//choose CSS selector from  Mother.CSS ->TO PREVENT A SECOND CALL FOR BUTTONS
			};
			//domClass.add(dijitObj.domNode, "Mother_"+this.prefix);//add a class to CSS so that we can have a CSS selector to all widgets in a form
			//domClass.add(this.xPane.domNode, "Mother_"+this.template);//add the CSS class "Mother_"+A,B,C,D,E,F to ContentPane - Match with Mother.CSS

			//for buttons we need to transmit the style (already set in the top span node) to the node with id that is in Mother
			// we can not do it here because at this point the widget is not yet in the DOM (dojo.byId(xId) returns null - to solve this:
			//   We need to call CompensationAll after all addChilds added in order to do a compensationButton followed by a formObj.startup();
		//console.log("Fabricou Widg order="+xOrder+"->"+this.name+"."+this.static.zarrObj[this.currentFormNumber][this.totObjects()-1].props.id+" "+this.static.zarrObj[this.currentFormNumber][this.totObjects()-1].props.title);
			if(this.oDbg.isDbg("addChild")) this.oDbg.display("--->Fabricou Widg order="+xOrder+"->**********"+this.static.zarrObj[this.currentFormNumber][this.totObjects()-1].props.id+"********** >>>"+this.static.zarrObj[this.currentFormNumber][this.totObjects()-1].props.title+"<<<");
		//console.log("----->Value:"+this.static.zarrObj[this.currentFormNumber][this.totObjects()-1].props.value+" order do id="+dijitObj.get("id")+"=>order="+this.locateOrderById(dijitObj.get("id")));
			if(this.oDbg.isDbg("addChild")) this.oDbg.display("-------->Value:"+this.static.zarrObj[this.currentFormNumber][this.totObjects()-1].props.value+" order do id="+dijitObj.get("id")+"=>order="+this.locateOrderById(dijitObj.get("id")));
		//console.log("---------->Width="+this.static.zarrObj[this.currentFormNumber][this.totObjects()-1].props.style.width+" height="+this.static.zarrObj[this.currentFormNumber][this.totObjects()-1].props.style.height+" visibility="+this.static.zarrObj[this.currentFormNumber][this.totObjects()-1].props.style.visibility);
			if(this.oDbg.isDbg("addChild")) this.oDbg.display("--------------->Width="+this.static.zarrObj[this.currentFormNumber][this.totObjects()-1].props.style.width+" height="+this.static.zarrObj[this.currentFormNumber][this.totObjects()-1].props.style.height+" visibility="+this.static.zarrObj[this.currentFormNumber][this.totObjects()-1].props.style.visibility);
			//--------------------------------------- FIM DO "NACIONAL TRAMBOLHISMO" -----------------------------------------------------------------------------------------------
						
			//return xAllProps;
			return dijitObj;// end of method addChild (new for version 6)
		},//addChild

		//----------------------------------------------- widgets UPDATE methods (9)-----------------------------------------------------------------------------------------
		//-------------------------------------------------------------------------------------------
		setFieldProps:function(xId,options){//sets first level properties for field with Id=xId
		//-------------------------------------------------------------------------------------------
		// parameter xId is necessary, optional (name,value,tb_order,label) by any order
		// for type=dateTextBox value to be saved will be a JavaScript date Object. 
		//		The input can be JS date object or string (that will be parsed with datePattern)
			//alert("Entrou em setFieldProps()");
			//ex: f0.setFieldProps(xId,{label:x}); 
			var xOrder=this.locateOrderById(xId);//identifica order no array
			if(xOrder==-1){
				return; //o field não existe neste form. A mensagem de erro é dada em locateOrder
			}
			var xName=this.fieldById(xId).props.name;//default value 
			var xValue=this.fieldById(xId).props.value;//if type="dateTextBox" value will be a javascript date object
			var xTb_order=this.fieldById(xId).props.tb_order;//default value 
			var xTabindex=this.fieldById(xId).props.tabindex;//default value 
			var xLabel=this.fieldById(xId).props.label;//default value 
			var xRequired=this.fieldById(xId).props.required;//default value 
			var xMissingMessage=this.fieldById(xId).props.missingMessage;//default value 
			var xRegExp=this.fieldById(xId).props.regExp;//default value 
			var xDatePattern=""; 
			if(this.fieldById(xId).type=="dateTextBox"){ //without this we will get an error for type#"datebox"
				xDatePattern=this.fieldById(xId).props.constraints.datePattern;//default value 
			}
			var xxDateValue=""; //used only in type="dateTextBox" to save value until datepattern is available
			var xType=this.fieldById(xId).type;
			var xInvalidMessage=this.fieldById(xId).props.invalidMessage;//default value 
			var xChecked=this.fieldById(xId).props.checked;//default value 
			var xClickCode="";//default value => no code on click
			var xPreCode="";//default value => no code on pre
			var xPosCode="";//default value => no code on pos
			var xChangeCode="";//default value => no code on pos
			var xDisable=false;//default value => click code is enabled in button
			var xDisabled=false;//default value => the whole button is activated
			var xDisableChangeCode=false;//default value => the onChange dijit event is activated
		
			// reception of optional param
			for(var key in options) { //key vai iterar no lado esq do associative array
				//alert("Em setFieldProps Variável "+key+" tem o valor:" + options[key]);
				//alert("---------->key="+key);
				switch(key){
					case "name":
						xName=options[key];
						//arrObj[xOrder].props.name=xName;	//actualiza props	
						this.static.zarrObj[this.currentFormNumber][xOrder].props.name=xName;	//actualiza props	
						dijit.byId(xId).set("name",xName);
						break;
					case "value":
						xValue=options[key];
						//this.arrObj[xOrder].props.value=xValue;	//actualiza props	
						this.static.zarrObj[this.currentFormNumber][xOrder].props.value=xValue;	//actualiza props	
						//if widget is a label the property to change is label instead of value....
						if(xType=="button"){
							dijit.byId(xId).set("label",xValue);
						}else{
							dijit.byId(xId).set("value",xValue);
						};
						//dijit.byId(xId).set("value",xValue);
						break;
					case "tb_order":
						xTb_order=options[key];
						//arrObj[xOrder].props.tb_order=xTb_order;	//actualiza props	
						this.static.zarrObj[this.currentFormNumber][xOrder].props.tb_order=xTb_order;
						dijit.byId(xId).set("tb_order",xTb_order);
						break;
					case "tabindex":
						xTabindex=options[key];
						//arrObj[xOrder].props.tabindex=xTabindex;	//actualiza props	
						this.static.zarrObj[this.currentFormNumber][xOrder].props.tabindex=xTabindex;
						dijit.byId(xId).set("tabindex",xTabindex);
						break;
					case "required":
						xRequired=options[key];
						//arrObj[xOrder].props.required=xRequired;	//actualiza props	
						this.static.zarrObj[this.currentFormNumber][xOrder].props.required=xRequired;
						dijit.byId(xId).set("required",xRequired);
						break;
					case "invalidMessage":
						xInvalidMessage=options[key];
						//arrObj[xOrder].props.invalidMessage=xInvalidMessage;	//actualiza props	
						this.static.zarrObj[this.currentFormNumber][xOrder].props.invalidMessage=xInvalidMessage;
						dijit.byId(xId).set("invalidMessage",xInvalidMessage);
						break;
					case "missingMessage":
						xMissingMessage=options[key];
						//alert("setFieldProps MissingMsg="+xMissingMessage+" type="+arrObj[xOrder].type);
						//arrObj[xOrder].props.invalidMessage=xMissingMessage;	//actualiza props	
						this.static.zarrObj[this.currentFormNumber][xOrder].props.invalidMessage=xMissingMessage;
						dijit.byId(xId).set("missingMessage",xMissingMessage);
						break;	
					case "label":
						xLabel=options[key];
						//arrObj[xOrder].props.label=xLabel;	//actualiza props
						this.static.zarrObj[this.currentFormNumber][xOrder].props.label=xLabel;
						dijit.byId(xId).set("label",xLabel);
						break;
					case "regExp":
						xRegExp=options[key];
						//arrObj[xOrder].props.invalidMessage=xRegExp;	//actualiza props	
						this.static.zarrObj[this.currentFormNumber][xOrder].props.invalidMessage=xRegExp;	
						dijit.byId(xId).set("regExp",xRegExp);
						break;
					case "datePattern": 
						xDatePattern=options[key];
						//arrObj[xOrder].props.constraints={datePattern:xDatePattern};	//EXCLUSIVO de dateTextBox
						this.static.zarrObj[this.currentFormNumber][xOrder].props.constraints={datePattern:xDatePattern};
						dijit.byId(xId).set("constraints",{datePattern:xDatePattern});
						break;	
					case "checked":
						xChecked=options[key];
						//arrObj[xOrder].props.checked=xChecked;	//actualiza props	
						this.static.zarrObj[this.currentFormNumber][xOrder].props.checked=xChecked;	
						dijit.byId(xId).set("checked",xChecked); //converte o evento !!!
						break;
					case "disable"://inhibits "clickCode" to trigger;
						xDisable=options[key];
						//arrObj[xOrder].props.checked=xChecked;	//actualiza props	
						this.static.zarrObj[this.currentFormNumber][xOrder].props.disable=xDisable;	
						if(xType=="button"){
							if(xDisable){
								//alert("Disable - button will be disabled");
								dijit.byId(xId).set("onClick",function(){;}); //se for "disable" desactiva onClick 	
							}else{
								//alert("Enable - button will be enabled");
								var xxClickCode=this.static.zarrObj[this.currentFormNumber][xOrder].props.clickCode;	
								dijit.byId(xId).set("onClick",function(){eval(xxClickCode)}); 
							};
						};
						break;
					case "disabled"://the whole button desactivated if true - do not confuse with above
						xDisabled=options[key];
						//arrObj[xOrder].props.checked=xChecked;	//actualiza props	
						this.static.zarrObj[this.currentFormNumber][xOrder].props.disabled=xDisabled;	
						dijit.byId(xId).set("disabled",xDisabled); //converte o evento !!!
						break;
					case "disableChangeCode"://inhibits "changeCode" to trigger (comboBox);
						xDisableChangeCode=options[key];
						this.static.zarrObj[this.currentFormNumber][xOrder].props.disableChangeCode=xDisableChangeCode;	
						if(xType=="comboBox"){
							if(xDisableChangeCode){
								dijit.byId(xId).set("onChange",function(){;}); //se for "disable" desactiva onClick 	
							}else{
								//alert("Enable - onChange event be enabled");
								var xxChangeCode=this.static.zarrObj[this.currentFormNumber][xOrder].props.changeCode;	
								dijit.byId(xId).set("onChange",function(){eval(xxChangeCode)}); 
							};
						};
						break;						
					case "clickCode":
						xClickCode=options[key];
						//arrObj[xOrder].props.clickCode=xClickCode;	//actualiza props	
						this.static.zarrObj[this.currentFormNumber][xOrder].props.clickCode=xClickCode;	
						/*
						if(xClickCode=="disable"){
							dijit.byId(xId).set("onClick",function(){;}); //se for "disable" desactiva onClick 
							//alert("vai fazer disable");
						}else{
							dijit.byId(xId).set("onClick",function(){eval(xClickCode)}); 
							//console.log("Poe clickCode="+xClickCode);
						}
						*/
						var xDisable=this.static.zarrObj[this.currentFormNumber][xOrder].props.disable;
						if(xDisable){
							//alert("ClickCode with disable - button will be disabled");
							dijit.byId(xId).set("onClick",function(){;}); //se for "disable" desactiva onClick 
							//alert("vai fazer disable");
						}else{
							dijit.byId(xId).set("onClick",function(){eval(xClickCode)}); 
							//console.log("Poe clickCode="+xClickCode);
						}
						//alert("Em Mother --> Gravou !!!");
						break;
					case "preCode":
						xPreCode=options[key];
						//arrObj[xOrder].props.preCode=xPreCode;	//actualiza props	
						this.static.zarrObj[this.currentFormNumber][xOrder].props.preCode=xPreCode;	
						z=dijit.byId(xId);
						dijit.byId(xId).set("onFocus",xPreCode); //converte o evento !!!
						break;
					case "posCode":
						xPosCode=options[key];
						//arrObj[xOrder].props.posCode=xPosCode;	//actualiza props
						this.static.zarrObj[this.currentFormNumber][xOrder].props.posCode=xPosCode;	
						z=dijit.byId(xId);					
						dijit.byId(xId).set("onBlur",xPosCode); //converte o evento !!!
						break;	
					case "changeCode":
						xChangeCode=options[key];
						this.static.zarrObj[this.currentFormNumber][xOrder].props.changeCode=xChangeCode;	
						var xDisableChangeCode=this.static.zarrObj[this.currentFormNumber][xOrder].props.disableChangeCode;
						if(xDisableChangeCode){
							dijit.byId(xId).set("onChange",function(){;}); //se for "disableChangeCode" desactiva onChange
						}else{
							dijit.byId(xId).set("onChange",function(){eval(xChangeCode)}); 
						};
						break;		
					default: alert("MotherLib.setFieldProps: field="+xId+"  The param "+key+" is not valid in setFieldProps()");	
				}
			}	
			// pode ter havido uma mudança de datePattern. Nesse caso é necessário forçar value
			var x=this.fieldById(xId).type;
			if(this.fieldById(xId).type=="dateTextBox"){
				 var xxDateValue=xValue;//this is a string with the new data
				//checks if value is string or JS date object.
				if(typeof xValue =="object"){
					alert("setFieldProps - JAVASCRIPT DATE OBJECT");
				}
				if(typeof xValue =="string"){
					//alert("setFieldProps - input string ");
					// vai converter para JS Date object usando o DatePattern que tem de estar no formato da string !!!
					//xValue=dojo.date.locale.parse(xValue,{datePattern:xDatePattern,selector:"date"});//reconstroi javascript Date object
					xValue=Locale.parse(xValue,{datePattern:xDatePattern,selector:"date"});//reconstroi javascript Date object
					this.arrObj[xOrder].props.value=xValue;	//tem de guardar como JS date object	
					dijit.byId(xId).set("value",xValue);//this makes the necessary refresh !!!!
				}
			}
			//dijit.byId(xId).startup();
		},// end of method setFieldProps()	
		//-------------------------------------------------------------------------------------------
		setFieldStyle:function(xId,options){//sets second level properties for field with Id=xId
		//-------------------------------------------------------------------------------------------
			// parameter xId is necessary, optional (left,top,width) by any order {left:110,top:10,width:250}
			//ex:
			var xOrder=this.locateOrderById(xId);//identifica order no array
			if(xOrder==-1){
				return; //o field não existe neste form. A mensagem de erro é dada em locateOrder
			}
			var xLeft=this.fieldById(xId).props.style.left;//default value 
			var xTop=this.fieldById(xId).props.style.top;//default value 
			var xWidth=this.fieldById(xId).props.style.width;//default value 
			var xHeight=this.fieldById(xId).props.style.height;//default value 
			var xType=this.static.zarrObj[this.currentFormNumber][xOrder].type;
			//console.log("setFieldStyle --------------------->type="+xType+ " adjust l="+this.adjust_display(xType).l+" t="+this.adjust_display(xType).t+" w="+this.adjust_display(xType).w+" h="+this.adjust_display(xType).h);
			if(this.oDbg.isDbg("setFieldStyle")) this.oDbg.display("---->type="+xType+ " adjust l="+this.adjust_display(xType).l+" t="+this.adjust_display(xType).t+" w="+this.adjust_display(xType).w+" h="+this.adjust_display(xType).h);
			// reception of optional param
			for(var key in options) { //key vai iterar no lado esq do associative array
				//alert("Variável "+key+" tem o valor:" + options[key]);
				//console.log("--------------------->"+key);
				switch(key){
					case "left":
						var xLeft=options[key];
						this.static.zarrObj[this.currentFormNumber][xOrder].props.style.left=xLeft;	//updates props (no display adjustments)
						xLeft=this.snapToGrid(xLeft+this.adjust_display(xType).l);// to prepare display			
						if(this.static.zarrObj[this.currentFormNumber][xOrder].type=="grid"){//dgrid does not have (yet..) dijit.byId...
							domStyle.set(this.static.zarrObj[this.currentFormNumber][xOrder].props.id,"left",xLeft+"px");// actualiza o node object						
						}else{
							domStyle.set(dijit.byId(xId).domNode,"left",xLeft+"px");// actualiza o dijit object	
						};
						break;
					case "top":
						var xTop=options[key];			
						this.static.zarrObj[this.currentFormNumber][xOrder].props.style.top=xTop;//updates props (no display adjustments)
						xTop=this.snapToGrid(xTop+this.adjust_display(xType).t);// to prepare display			
						if(this.static.zarrObj[this.currentFormNumber][xOrder].type=="grid"){//dgrid does not have (yet..) dijit.byId...
							domStyle.set(this.static.zarrObj[this.currentFormNumber][xOrder].props.id,"top",xTop+"px");// actualiza o node object						
						}else{
							domStyle.set(dijit.byId(xId).domNode,"top",xTop+"px");// actualiza o dijit object	
						};						
						break;	
					case "width":
						var xWidth=options[key];
						this.static.zarrObj[this.currentFormNumber][xOrder].props.style.width=xWidth+"px";//updates props (no display adjustments)
						//var adj=this.adjust_display(xType).w;
						xWidth=this.snapToGrid(xWidth+this.adjust_display(xType).w);// to prepare display			
						if(this.static.zarrObj[this.currentFormNumber][xOrder].type=="grid"){//dgrid does not have (yet..) dijit.byId...
							domStyle.set(this.static.zarrObj[this.currentFormNumber][xOrder].props.id,"width",xWidth+"px");// actualiza o dijit object	
						}else{
							domStyle.set(dijit.byId(xId).domNode,"width",xWidth+"px");// actualiza o dijit object	
						};							
						break;
					case "height":
						var xHeight=options[key];
						this.static.zarrObj[this.currentFormNumber][xOrder].props.style.height=xHeight+"px";//updates props (no display adjustments)
						xHeight=this.snapToGrid(xHeight+this.adjust_display(xType).h);// to prepare display	
						if(this.static.zarrObj[this.currentFormNumber][xOrder].type=="grid"){//dgrid does not have (yet..) dijit.byId...
							domStyle.set(this.static.zarrObj[this.currentFormNumber][xOrder].props.id,"height",xHeight+"px");// actualiza o dijit object
						}else{
							domStyle.set(dijit.byId(xId).domNode,"height",xHeight+"px");// actualiza o dijit object	
						};							
						break;					
					default: alert("setFieldStyle: field="+xId+"  The param "+key+" is not valid in setFieldStyle()");	
				}
			}
			if(this.field(xOrder).type=="button"){
				this.compensationButton(xOrder);
				this.static.zarrWidgets[this.currentFormNumber][xOrder].startup();
				//alert("setFieldStyle fez compensation for Button");
			};
			if(this.static.zarrObj[this.currentFormNumber][xOrder].type=="grid"){//dgrid does not have (yet..) dijit.byId...
				//this.static.zarrWidgets[this.currentFormNumber][xOrder].resize();
				//this.static.zarrWidgets[this.currentFormNumber][xOrder].startup();
				//this.xPane.startup();
				//this.visibleById(this.static.zarrObj[this.currentFormNumber][xOrder].props.id);
				//console.log("setFieldStyle FARIA STARTUP() DA GRID "+this.static.zarrObj[this.currentFormNumber][xOrder].props.id+" com top="+this.static.zarrObj[this.currentFormNumber][xOrder].props.style.top);				
				if(this.oDbg.isDbg("setFieldStyle")) this.oDbg.display("FARIA STARTUP() DA GRID "+this.static.zarrObj[this.currentFormNumber][xOrder].props.id+" com top="+this.static.zarrObj[this.currentFormNumber][xOrder].props.style.top);	
			}else{
				dijit.byId(xId).startup();
			};	
			//dijit.byId(xId).startup();
		},// setFieldStyle
		//-------------------------------------------------------------------------------------------
		setFieldPropsByName:function(xName,options){//the same as setFieldProps but by Name
		//-------------------------------------------------------------------------------------------
		// ex fBase.setFieldPropsByName("tot",{preCode:"set('Mon','xx-->');"});
			//Precisamos de saber o Id de xName no form f
			var xId=this.locateIdByName(xName);//returns the id of a certain xName
			if (xId.length==0){
				alert("MotherLib.setFieldPropsByName - Field name "+xName+" does not exist in "+ this.name);
				return; 
			}
			this.setFieldProps(xId,options);
		},//setFieldPropsByName
		//-------------------------------------------------------------------------------------------
		setFieldStyleByName:function(xName,options){//the same as setFieldStyle but by Name
		//-------------------------------------------------------------------------------------------
			//Precisamos de saber o Id de xName no form f
			var xId=this.locateIdByName(xName);//returns the id of a certain xName
			if (xId.length==0){
				alert("MotherLib.setFieldPropsByName - Field name "+xName+" does not exist in "+ this.name);
				return; 
			}
			this.setFieldStyle(xId,options);
		},//setFieldStyleByName		
		//-------------------------------------------------------------------------------------------
		fieldById:function(xId){// gets properties from a field identified by its Id (using hierarquical access (x.prop1.prop2..). 
		//-------------------------------------------------------------------------------------------	
			//Returns the value that is inside mother memory. Remember that if the user changed the value without commit this can be different 
			// what you see in the screen. To get what you see in the screen use instead fieldShownById. ex f0.fieldShownById(xId).props.style.left;
			//return this.arrObj[this.locateOrderById(xId)];//podemos conectar o resto ..
			return this.static.zarrObj[this.currentFormNumber][this.locateOrderById(xId)];//podemos conectar o resto ..
		},	
		//-------------------------------------------------------------------------------------------
		fieldByName:function(xName){//gets properties from a field identified by its name (using hierarquical access (x.prop1.prop2..).
		//-------------------------------------------------------------------------------------------
		// ex 	x11=fBase.fieldByName("tot").props.preCode;//exemplo de Get
			//Precisamos de saber o Id de xName no form f
			//alert("entrou em fieldyName com "+xName);
			var xOrder=this.locateOrderByName(xName);//returns the sequencial order number for the field from its name.
			if (xOrder<0){
				alert("MotherLib6.fieldByName - Field name "+xName+" does not exist in "+ this.name);
				return; 
			}
			//return arrObj[this.locateOrderById(xId)];//podemos conectar o resto ..
			return this.static.zarrObj[this.currentFormNumber][xOrder];//podemos conectar o resto ..

		},
		//-------------------------------------------------------------------------------------------
		fieldShownById:function(xId){// returns the value actually shown on screen (notice that this may be different from fieldById(xId).<property>)
		//-------------------------------------------------------------------------------------------	
			//Returns the value shown on screen when the method is called. (compare with fieldById). DOM should be ready !!!
			//var zz=dijit.byId(xId).attr('displayedValue'); //old code <1.7
			//var zz=Registry.byId(xId).get('displayedValue'); //new code >=1.7
			var widget=Registry.byId(xId); //new code >=1.7
			if(widget){
				//return widget.get('displayedValue'); //new code >=1.7
				var x=widget.get("checked");//if the widget is a checkbox x will be true or false. The value if checkbox is selected will be "on"
				var xRet=null;
				if(x==null){
					xRet=widget.get('value');
				}else{
					//console.log("fieldShownById - o objecto é checkbox com xRet="+x);
					xRet=x;
				};
				//var xx=widget.get("value");
				//alert("fieldShownById - value="+xRet+" CHECKED="+x);
				//return widget.get('value'); //new code >=1.7
				return xRet; //new code >=1.7
			}else{
				console.log("MotherLib.fieldShownById -->Error: Widget "+xId+" undefined");
				alert("MotherLib.fieldShownById -->Error: Widget "+xId+" undefined");
			};
		},//fieldShownById
		//-------------------------------------------------------------------------------------------
		fieldShownByName:function(xName){//the same as fieldShownById() but byName (notice that this may be different from fieldById(xId).<property>)
		//-------------------------------------------------------------------------------------------
			//Returns the value shown on screen when the method is called. (compare with fieldById). DOM should be ready !!!
			//Precisamos de saber o Id de xName no form f
			var xId=this.locateIdByName(xName);//returns the id of a certain xName
			if (xId.length==0){
				alert("MotherLib.fieldShownByName - Field name "+xName+" does not exist in "+ this.name);
				return; 
			};
			return this.fieldShownById(xId);
		},//fieldShownByName		
		//-------------------------------------------------------------------------------------------
		visibleById:function(xId){// sets a field identified by its Id as visible. 
		//-------------------------------------------------------------------------------------------
			var xOrder=this.locateOrderById(xId);
			if (xOrder>=0){
				//actualiza as properties
			//this.arrObj[xOrder].props.style.visibility="visible";
				this.static.zarrObj[this.currentFormNumber][xOrder].props.style.visibility="visible";
				var xType=this.static.zarrObj[this.currentFormNumber][xOrder].type;
				if(xType=="grid"){
					//alert("visibleById GRID="+this.static.zarrObj[this.currentFormNumber][xOrder].props.id);
					domStyle.set(this.static.zarrObj[this.currentFormNumber][xOrder].props.id, 'display', '');
				}else{
					domStyle.set(dijit.byId(xId).domNode,"visibility","visible");
				};				
			};
		},//visibleById
		//-------------------------------------------------------------------------------------------
		unVisibleById:function(xId){// sets a field identified by its Id as invisible.  
		//-------------------------------------------------------------------------------------------
			var xOrder=this.locateOrderById(xId);
			if (xOrder>=0){
				//actualiza as properties
			//this.arrObj[xOrder].props.style.visibility="hidden";
				this.static.zarrObj[this.currentFormNumber][xOrder].props.style.visibility="hidden";
				var xType=this.static.zarrObj[this.currentFormNumber][xOrder].type;
				if(xType=="grid"){
					//alert("unVisibleById GRID="+this.static.zarrObj[this.currentFormNumber][xOrder].props.id);
					domStyle.set(this.static.zarrObj[this.currentFormNumber][xOrder].props.id, 'display', 'none');
				}else{
					domStyle.set(dijit.byId(xId).domNode,"visibility","hidden");
				};
			};
		},//unVisibleById		
		//-------------------------------------------------------------------------------------------
		addExternal:function(xObj,xLeft,xTop){// places an external object visually inside the form and in positions xLeft,xTop 
		//-------------------------------------------------------------------------------------------	
			//No admin provided by MotherLib - The added object is not inside the form - Only xId can be used to reference the objet inside mother form
			// xObj can be a widget or a domNode.
			// call this method when you are sure the DOM is ready. 
			//exemple:
			// 	var aa = DomConstruct.create("div"); 
			//	aa.innerHTML=util.makeDivId("I747",1,1,100,30,4,"crimson");//
			//	var cPal1 = new ColorPalette({
			//		palette: "7x10",
			//		onChange: function(val){ chooseColor(val); }
			//  }); //no placeholder
			// Ready(function(){
			//		layoutToolBox.addExternal(aa,4,120); //already a domNode
			//		layoutToolBox.addExternal(cPal1,4,160);	//it is not a domNode					
			//});
			// --------------------- structure in DOM ------------------------------------
			//         zz (div) 
			//				zz.innerHTML with style positions (id='test')
			//					subzz (the placeholder for xObj)
			//				this.formObj
			//
			var zz = DomConstruct.create("div");
			var xId=this.prefix+"_ext"+(this.externalCounter+1);// Current number to form div DOM id is: <prefix>+"_ext"+<counter>
			//alert("MotherLib.addExternal Id="+xId);
			zz.innerHTML="<div id='"+xId+"' style='position: absolute; top:"+xTop+"px; left:"+xLeft+"px;'></div>";
			this.formObj.domNode.appendChild(zz);//adds a node --- not another widget....to Mother externally: Notice that this is not administrated by Mother
			var subzz = DomConstruct.create("div"); //creates another HTML div to be under zz that will be the placeholder of xObj
			//Dom.byId("test").appendChild(subzz); //places subzz node  under zz node - new
			dojo.byId(xId).appendChild(subzz); //places subzz node  under zz node - old style yet
			if(xObj.domNode ){//it is NOT a domNode - Otherwise domNode.domNode =>null
				//alert("MotherLib.addExternal not  a DOMNODE Id="+xId);
				DomConstruct.place(xObj.domNode,subzz);//se o objecto for um widget	
			}else{// it is  a domNode
				//alert("MotherLib.addExternal it is a DOMNODE Id="+xId);
				DomConstruct.place(xObj,subzz);//se o objecto já for um node
			};
			this.externalCounter++;
		},	
		compensationAll:function(){//Necessary because by some reason button width/height need to be set after widget DOM connection (not before this)
			console.log("barriga do button em buttonCompensation ----------");
			//for every button in the form adjust width and height
			xTotWidgets=this.static.zarrObj[this.currentFormNumber].length;
			//for(var i=0;i<this.arrObj.length;i++){
			for(var i=0;i<xTotWidgets;i++){
			    //console.log("buttonCompensation ->"+this.arrObj[i].type+" width="+this.arrObj[i].props.style.width+" height="+this.arrObj[i].props.style.height);
			    console.log("CompensationAll->"+this.static.zarrObj[this.currentFormNumber][i].type+" width="+this.static.zarrObj[this.currentFormNumber][i].props.style.width+" height="+this.static.zarrObj[this.currentFormNumber][i].props.style.height);
				//if(this.arrObj[i].type=="button"){
				if(this.static.zarrObj[this.currentFormNumber][i].type=="button"){
					this.compensationButton(i);
				};
				//this.arrWidgets[i].startup();
				this.static.zarrWidgets[this.currentFormNumber][i].startup();
			}
			this.formObj.startup();
		},
		compensationButton:function(xOrder){//HANDLE WITH CARE use only in Buttons !!!
			//A button is composed by 5 <SPAN> dom nodes (3 in hierarchy) - ex for node id="f7":
			//   top SPAN node widgetid="f7"  has a full style description - CSS class .dijitButton (a CSS class Mother fica aqui antes de .dijitButton
			//   	   SPAN node - the click area that supports click event ondijitclick:_onClick - CSS class .dijitButtonNode
			//				SPAN node id="f7" style description exists originaly with no width and no height - CSS class .dijitButtonContents
			//              this area node should also be resized to follow the top container
			//				(otherwise if we change CSS - it will show a small core)
			//					SPAN to support icon (disabled if no icon)- - CSS class .dijitIcon
			//					SPAN to support icon (disabled if no icon) - - CSS class .dijitToggleButtonIconChar
			//					SPAN id=f7_label to support label - CSS class .dijitButtonText
			//by some reason styleObj is transmited only to top SPAN node. we need to introduce it in node id="f7"			
			var xId=this.static.zarrObj[this.currentFormNumber][xOrder].props.id;
			//alert("compensationButton entrou com Id="+xId+" order="+xOrder);
			var xNode=dojo.byId(xId);
			var xWidth=this.static.zarrObj[this.currentFormNumber][xOrder].props.style.width;//this width is string ex "100px"
			xWidth=(parseInt(xWidth)+this.adjust_display("button").w)+"px";
			var xHeight=this.static.zarrObj[this.currentFormNumber][xOrder].props.style.height;//this height is string ex "49px"
			xHeight=(parseInt(xHeight)+this.adjust_display("button").h)+"px";
			//alert("compensationButton line 1490 xWidth="+xWidth+" xHeight="+xHeight);
			domStyle.set(xNode,"width",xWidth); // do not forget to add "px" in domStyle. In this case it is already embeded in xWidth				
			domStyle.set(xNode,"height",xHeight); 
			//add a class so that we can have a CSS selector to all buttons of a certain form
			//the class should be introduced in second SPAN node (THE ONE THAT HAS THE CLICK AREA) counting from TOP !!!!
/*			
			if(this.template){//one template is set....we need to replace it - the old ("Mother_"+this.template) will be replaced by "Mother_"+xTemplate.
				//domClass.replace(xNode.parentNode,"Mother_"+xTemplate,"Mother_"+this.template);//
				//alert("MotherLib6.compensationButton -->o template já existe e compensationButton foi invocado");
				domClass.add(xNode.parentNode, "Mother_"+this.template);//add a class "Mother_x" to the SPAN node thar has .dijitButtonNode
			}else{//in this case we only have to add
				//domClass.add(xNode.parentNode, "Mother_"+this.template);//add a class "Mother_x" to the SPAN node thar has .dijitButtonNode
				domClass.add(xNode.parentNode, "Mother_"+this.template);//add a class "Mother_x" to the SPAN node thar has .dijitButtonNode
			};	
*/			
			//alert("fez MotherLib3 compensationButton Width="+domStyle.get(xNode,"width")+" Height="+domStyle.get(xNode,"height"));
		},//compensationButton
		
		//------------------------------------------------- INTERNAL methods (16)-----------------------------------------------------------------------------------------
		totObjects:function(){//returns the total number of widgets in the current form
			var tot=0;
			//var widgetTypes=this.counter.length;
			var widgetTypes=this.static.zcounter[this.currentFormNumber].length; //number of diferent types of widgets
			//for(var i=0;i<this.counter.length;i++){
			for(var i=0;i<widgetTypes;i++){
				//tot+=this.counter[i]
				tot+=this.static.zcounter[this.currentFormNumber][i];//gets number of widgets for type i 
			}
			return tot;
		},//totObjects
		//maxTot:function(xType){return this.maxCounter[this.counterIndex(xType)];},//gets the highest number of fields of xType 
		maxTot:function(xType){return this.static.zmaxCounter[this.currentFormNumber][this.counterIndex(xType)];},//gets the highest number of fields of xType 
		//	this.static.zmaxCounter[this.currentFormNumber][xIndex]+=1;

		widgetIndexes:{"textBox": 0, "label":1, "numberBox":2},
		counterIndexMig:function(xType){//MIGUEL's VERSION FOR gets the index of type=xType in counter[] TO BE TESTED
			var xRet=null;
			xRet=widgetIndexes[xType];
			if(!xRet)  alert("Form Method tot: the type "+xType+" is unknown");	
			return xRet;
		},//counterIndexMig
		counterIndex:function(xType){//gets the index of type=xType in counter[] 
			var xint;
			switch(xType){
				case "textBox":	
					xint=0;	
					break;
				case "label":
					xint=1;
					break;
				case "numberBox":
					xint=2;
					break;			
				case "textArea":
					xint=3;
					break;			
				case "checkBox":
					xint=4;
					break;			
				case "dateTextBox":
					xint=5;
					break;
				case "button":
					xint=6;				
					break;	
				case "comboBox":
					xint=7;
					break;	
				case "grid":
					xint=8;
					break;
				case "tabs":
					xint=9;
					break;	
				default: alert("Form Method tot: the type "+xType+" is unknown");	
			}		
			return xint;
		},//counterIndex	
		field:function(xOrder){// gets properties from a field identified by its sequencial order number (using hierarquical access (x.prop1.prop2..).  
			//return this.arrObj[xOrder];//podemos conectar o resto ....
			return this.static.zarrObj[this.currentFormNumber][xOrder];
		},//field
		widget:function(xOrder){// gets the widget identified by its sequencial order number (using hierarquical access (x.prop1.prop2..).  
			return this.static.zarrWidgets[this.currentFormNumber][xOrder];
		},//widget		
		tag:function(xOrder){// gets the Tag (true/false) for xOrder   
			return this.static.zarrTags[this.currentFormNumber][xOrder];
		},//tag		
		setTag:function(xOrder,xTrueFalse){// gets the Tag (true/false) for xOrder   
			this.static.zarrTags[this.currentFormNumber][xOrder]=xTrueFalse;
			return;
		},//setTag	
		locateOrderById:function(xId){// returns the sequencial order number for the field from its Id.
			//alert("locateOrderById para >"+xId+"<");
			var i=0;
			var xOut=-1;
			var xTotWidgets=this.static.zarrObj[this.currentFormNumber].length;
			while(i<xTotWidgets){
				if(this.static.zarrObj[this.currentFormNumber][i].props.id==xId){
					//alert("encontrou order="+i);
					xOut=i;
					break;
				}
				i++;
			}
			if(xOut==-1){
				alert("form.locateOrderById:The widget/field id="+xId+" is unknown in form "+this.name);
			}		
			return xOut;
		},//locateOrderById
		locateOrderByName:function(xName){// returns the sequencial order number for the field from its name.
			//alert("locateOrderByName para >"+xName+"<");
			var i=0;
			var xOut=-1;
			var xTotWidgets=this.totObjects(); 
			while(i<xTotWidgets){
				if(this.static.zarrObj[this.currentFormNumber][i].props.name==xName){
					xOut=i;
					break;
				}
				i++;
			}
			if(xOut==-1){
				alert("form.locateOrderByName:The widget/field name="+xName+" is unknown in form "+this.name);
			}
			return xOut;
		},//locateOrderByName	
		locateIdByName:function(xName){// returns the Id for the field that has name=xName
			//alert("locateIdByName para >"+xName+"<");
			var xOrder=this.locateOrderByName(xName);
			if(xOrder>=0){
				return this.static.zarrObj[this.currentFormNumber][xOrder].props.id;
			}else{
				return "";
			};
		},//locateIdByName	
		snapToGrid:function(xVal){ //transform the input number xVal into a number according to a gridPattern
			var xMod=xVal%this.gridPattern;
			if(xMod==0) //no transform
				return(xVal);
			if(xMod<this.gridPattern/2) //snap no inferior number
				return(xVal-xMod);
			return(xVal+(this.gridPattern-xMod));
		},//snapToGrid
		//-------------------------------------------------------------------------------------------
		get:function(xName){//get the value of...
		//-------------------------------------------------------------------------------------------
		// This method acts at the DOM level only (only screen...)
		//sendo get("qtd")=dojo.byId("f4").value
			//Precisamos de saber o Id de xName no form f
			var xId=this.locateIdByName(xName);//returns the id of a certain xName
			var xRet=null;
			//alert("MotherLib6.get....depois de LocateIdByName() name="+xName+" obteve o id="+xId);
			if (xId.length>0){
				xRet=Dom.byId(xId).value;
				//console.log("MotherLib6.get....depois de LocateIdByName() name="+xName+" obteve o id="+xId+" que tem o value="+xRet);
				return xRet;
			};	
			return "";
		},//get
		//-------------------------------------------------------------------------------------------
		set:function(xName,xNew){//Set the field with name xName with the a new value xNew..
		//-------------------------------------------------------------------------------------------
		// This method acts at the DOM level only (only screen...)
			//console.log("MotherLib6.set....antes de LocateIdByName() "+xName);
			var xId=this.locateIdByName(xName);//returns the id of a certain xName
			//var xId=locateIdByName(xName);//returns the id of a certain xName
			//ex dojo.byId("f8").value=V("qtd")*V("pu");
			if (xId.length>0){
				//console.log("MotherLib6.set....vai por "+xNew+"no id="+xId);
				Dom.byId(xId).value=xNew;
			};
		},//set
		adjust_display:function(xType){//changes the display position of some widgets making adjustments in the l,t,w and h coordinates
			//  it uses the class object adjust:{button:{l:0,t:0,w:12,h:11},grid:{l:-7,t:-22,w:0,h:0},tabs:{l:0,t:0,w:0,h:0}}, //no caso da grid -7 y-22 !!!
			var xL=0;
			var xT=0;
			var xW=0;
			var xH=0;
			if(this.adjust[xType]){//if this.adjust[xType] is undefined it does not enter here 
				xL+=this.adjust[xType].l;
				xT+=this.adjust[xType].t;
				xW+=this.adjust[xType].w;
				xH+=this.adjust[xType].h;
			};
			return {l:xL,t:xT,w:xW,h:xH};
		},//adjust_display			
		placeFormInPane:function(floatF,xLeft,xTop,xWidth,xHeight,borderThickness,borderType,xColor,xSilent){//places the form in pane xPaneId. 
		//floatF - is true/false - if true pane style will be prepared for floating FORMS.
		//places the form in pane xPaneId. If pane does not exist creates a new one and places it in a div in the body()
		//     if it exists a pane with the same id, it is destroyed so that a new one may take its place
		//Parameters:fBuilder Object, ContentPaneId,left,top,width,height,borderThickness,BorderType,color
		//borderType are: solid, dotted or dashed
		//Content Pane if created here will get a CSS Class "Mother_"+(this.template - template of fBuilder Object)
			this.xPaneId=this.prefix+"_PaneId";//exemple ddf_PaneId - the id is unique before prefix is also unique
			var xDivId=this.prefix+"_PaneDiv";//exemple "f0__PaneDiv"
			var xStyle=null;

			if(Registry.byId(this.xPaneId)){
				Registry.remove(this.xPaneId);
				console.log("MotherLib.placeFormInPane remove "+this.xPaneId);
			};
			if(Dom.byId(this.xPaneId)){
				DomConstruct.destroy(this.xPaneId);
				console.log("MotherLib.placeFormInPane detroy DOM node "+this.xPaneId);
			};
			if(Dom.byId(xDivId)){
				DomConstruct.destroy(xDivId);
				console.log("MotherLib.placeFormInPane detroy DOM node "+xDivId);
			};
				
			//if(!dijit.byId(xPaneId)){//the ContentPane does not exist, it will be created in a div in the body
			var xDiv = DomConstruct.create("div"); 
			//var xDivId=this.prefix+"_PaneDiv";
			xDiv.innerHTML="<div id='"+xDivId+"'></div>"; //the div id is "divPane_"+xPaneId
			Win.body().appendChild(xDiv);//coloca o div no DOM
			if(floatF){
				//xStyle="position:absolute;left:"+xLeft+"px;top:"+xTop+"px;width:"+xWidth+"px;height:"+xHeight+"px;";
				xStyle="position:absolute;left:0px;top:0px;width:"+xWidth+"px;height:"+xHeight+"px;";
			}else{
				xStyle="position:absolute;left:"+xLeft+"px;top:"+xTop+"px;width:"+xWidth+"px;height:"+xHeight+"px;border: "+borderThickness+"px "+borderType+" "+xColor+";'";
			};
			if(this.oDbg.isDbg("placeFormInPane")) this.oDbg.display("xStyle="+xStyle);
			//alert("vai contruir pane "+this.xPaneId+" do form "+this.name);
			this.xPane=new ContentPane({ //x Pane is a form variable. we need this to do a this.xPane.startup() necessary for tabs - to avoid 3 bar probelm
				id:this.xPaneId,
				content:"",
				//style:'position:absolute;left:800px;top:5px;width:200px;height:30px;border: 1px dotted green;'
				style:xStyle
			}, xDivId);	//o carrierPane é colocado sobre o xDiv	
			//DomClass.add(xPane.domNode, "Mother_"+xFBuilder.prefix);//add the CSS class "Mother_"+(prefix of fBuilder Object) to ContentPane
			if(this.template){
				if(this.oDbg.isDbg("placeFormInPane")) this.oDbg.display("-------------------------------->INSTALL TEMPLATE "+this.template);
				domClass.add(this.xPane.domNode, "Mother_"+this.template);//add the CSS class "Mother_"+A,B,C,D,E,F to ContentPane - Match with Mother.CSS
			}else{
				if(this.oDbg.isDbg("placeFormInPane")) this.oDbg.display("-------------------------------->NO TEMPLATE ");
			};
			//};
			//if(!xSilent){//only if xSilent is false the pane will be shown
			if(true){//to be tested later on ! - silent is ignored to nonfloat forms for the time being.
				this.formObj.placeAt(this.xPaneId);  //o form é colocado no pane que: ou já existe ou senão existe é criado e colocado num div no body
			}else{
				if(this.oDbg.isDbg("placeFormInPane")) this.oDbg.display("FORM <"+this.name+"> is silent !!! Take care because form is not in DOM !");
			};	
		},//placeFormInPane		
		setCallBack:function( theCallBackObj, dijitObj, sOnAction ){//To avoid eval calls when unecessary (MIGUEL)
			//This method allows to avoid eval inside MotherLIb
			// Instead of 	//f0.addChild("checkBox",{left:480,top:10+5,title:"true/false for boolean isCreateDelTrueChild",changeCode:"z.changeCheck()"}); //8 OK
			//   --> needs 	this.z.changeCheck=function(){alert("changeCheck !!!!...");};
			// It allows to use:
		     //f0.addChild("checkBox",{left:480,top:10+5,title:"true/false",changeCode:{ func: function(){ z.changeCheck(); }, theThis: this , parms:{nome:"Miguel",idade:23} }}); //8
			// TEMPLATE { func: pointerToFunction, thiz: this , parms: { ...} }
			var pointer = theCallBackObj.func;
			var theThis= theCallBackObj.theThis;
			var theParms = theCallBackObj.parms;
			var localCallback= function( ) {
				if (  theThis ) {
					console.log("A)MotherLib.setCallBack - @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  EXISTE ENVIRONMENT");
					pointer.call(theThis, theParms );
				} else {
					console.log("B)MotherLib.setCallBack - @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  NAO EXISTE ENVIRONMENT");
					pointer(theParms);
				};
			};
			//var abc=function(){alert("ABC")};
			
			if(this.oDbg.isDbg("addChild")) this.oDbg.display("setCallBack----------------------------------------------vai fazer set");
			dijitObj.set( sOnAction,  localCallback ); //xFUNCIONA
			if(this.oDbg.isDbg("addChild")) this.oDbg.display("setCallBack----------------------------------------------JA FEZ set");

			dijitObj.startup();
			//
			//http://devlicio.us/blogs/sergio_pereira/archive/2009/02/09/javascript-5-ways-to-call-a-function.aspx
			//http://trephine.org/t/index.php?title=JavaScript_call_and_apply
			//http://www.alistapart.com/articles/getoutbindingsituations/
			//http://www.java-samples.com/showtutorial.php?tutorialid=829
			//http://vikasrao.wordpress.com/2011/06/09/javascripts-call-and-apply-methods/  <----------------------- liga a DOJO hitch
			//http://www.javascriptkit.com/jsref/function.shtml
		},//setCallBack
		// ---------------------------------------------------- DOJO WIDGETS DEFAULTS (14 11+3)---------------------------------------------------------------------------
		//-------------------------------------------------------------------------------------------
		JSON_Form: function(xId){//prepares properties object for DOJO form
		//-------------------------------------------------------------------------------------------
		// Builds a JSON object with the format {type:"form",props:JSON_props} for the default form
		// Param: xId=form Id
		// returns:a JSON Object representing the form object
		//-------------------------------------------------------------------------------------------
			var props = {
				id		 : xId,
				title    : "Base Form",
				encType  : 'multipart/form-data',
				action   : '',
				method   : '',
				content	 : "",
				style    : "margin-top: 14px;",
				onSubmit : function(event) {
					if (this.validate()) {
						return confirm('Ok !!! Form is valid, press OK to submit');
					} else {
						alert('Corrige lá isso antes de continuar');
						return false;
					}
				}
			};	
			//obj=new dijit.form.DateTextBox(props, dojo.doc.createElement(props.id)); //o 2º param é o DomNode string
			return {"type":"form","props":props}	
		},
		//-------------------------------------------------------------------------------------------
		JSON_Default_TextBox: function(xOrder,xTextBoxOrder,xProps){//Order within TextBoxes,xProps
		//-------------------------------------------------------------------------------------------
		// Param: Order within Form, Order within TextBoxes, xProps=json string with all props
		// Builds a JSON object with the format {type:"textBox",props:JSON_props} for the default TextBox
		//-------------------------------------------------------------------------------------------
			var xWidth=(xProps["width"]==0) ? 100:xProps["width"];
			var xHeight=(xProps["height"]==0) ? 24:xProps["height"];
			var styleObj={
				"position": "absolute",
				"left"    :xProps["left"]+"px",
				"top"     :xProps["top"]+"px",
				"width"   :xWidth+"px",
//				"padding":xPaddingTopBottom+"em 0.2em",
				"height"  :xHeight+"px"
			}
			var xTitle=(xProps["title"]=="@|") ? "TextBox"+xTextBoxOrder:xProps["title"];
			var xValue=(xProps["value"]=="@|") ? xTitle:xProps["value"];//if  xValue="@|" the tooltip will be the value 

			//var xTitle="TextBox"+xTextBoxOrder;
			//xValue=(xProps["value"]=="@|") ? xTitle:xProps["value"];
			var xName=(xProps["name"].length==0) ? xProps["id"]:xProps["name"];
			var xPlaceHolder=(xProps["placeHolder"].length==0) ? "Type data":xProps["placeHolder"];
			var props = {
				order	: xOrder,
				tb_order: xTextBoxOrder,
				id      : xProps["id"],
				name    : xName,
				title   : xTitle,
				tabindex: xOrder,
				value   : xValue,
				preCode : xProps["preCode"],
				posCode : xProps["posCode"],
				style   :styleObj,
				promptMessage: "",     //"No spaces please !!!",
				//regExp  : "^[A-Za-z0-9 _]*$",//to accept letters, numbers, spaces and underscores.//"[\\w]+" sem espaços http://www.stratulat.com/Regular_Expressions_JavaScript.html
				regExp  : xProps["regExp"],//"^[A-Za-z0-9 _]*$",//to accept letters, numbers, spaces and underscores.//"[\\w]+" sem espaços http://www.stratulat.com/Regular_Expressions_JavaScript.html
				invalidMessage: xProps["invalidMessage"],//"",    //"You have spaces in text !!!",
				missingMessage: xProps["missingMessage"],//"The value is required",  //message para qdo é required e não está preenchido
				size    : "10",
				trim    : true,
				//placeHolder	: xPlaceHolder,  //o que aparece inicialmente dentro da combo                 
				required: xProps["required"] //false
			};	
			return {"type":"textBox","props":props}	
		},
		//-------------------------------------------------------------------------------------------
		JSON_Default_Label: function(xOrder,xLabelOrder,xProps){//Order within labels,xProps
		//-------------------------------------------------------------------------------------------
		// Param: Order within Form, Order within Labels, xProps=json string with all props
		// Builds a JSON object with the format {type:"label",props:JSON_props} for the default label
		//-------------------------------------------------------------------------------------------
		// var xProps={left:xLeft,top:xTop,width:xWidth,value:xValue,id:xId,name:xName};
			//var xxWidth=(xProps["width"]==0) ? xProps["value"].length*10+"px":xProps["width"]+"px";
			var xValue=(xProps["value"].length==0) ? "label":xProps["value"];
			//alert("1-->"+xValue)		
			//var xValue=(xProps["value"]=="@|") ? "label":xProps["value"];
			if(xProps["value"]=="@|")
				var xValue="label";
			else
				var xValue=xProps["value"];
			//alert("2-->"+xValue)			



			//var xWidth=(xProps["width"]==0) ? xValue.length*0.7:xProps["width"]; //com em
			var xWidth=(xProps["width"]==0) ? xValue.length*10:xProps["width"];
			//var xHeight=(xProps["height"]==0) ? 1.4:xProps["height"];
			var xHeight=(xProps["height"]==0) ? 24:xProps["height"];
			//var xPaddingTopBottom=(xHeight-1)/2;
			var styleObj={
				"position": "absolute",
				"left"    :xProps["left"]+"px",
				"top"     :xProps["top"]+"px",
//				"padding":xPaddingTopBottom+"em 0.2em",
				//"width"   :xWidth+"em",
				"width"   :xWidth+"px",
				//"height"  :xHeight+"em",
				"height"  :xHeight+"px",
				"border"  :"0px"
			}	
			var xTitle="Label"+xLabelOrder;	
			var xReadOnly=(xProps["value"]=="@|") ? false:true; //retirei true para edição
			var xDisabled=(xProps["value"]=="@|") ? false:false;
			var	xName=(xProps["name"].length==0) ? xProps["id"]:xProps["name"];

			var props = {
				order	: xOrder,
				tb_order: xLabelOrder,
				id      : xProps["id"],
				name    : xName,
				title   : xTitle,
				value   : xValue,
				style   :styleObj,
				readOnly:xReadOnly,
				disabled:xDisabled,
				size    : "10"
			};	
			return {"type":"label","props":props}	
		},
		//-------------------------------------------------------------------------------------------
		JSON_Default_NumberBox: function(xOrder,xNumberBoxOrder,xProps){//Order within NumberBoxes,xProps
		//-------------------------------------------------------------------------------------------
		// Param: Order within Form, Order within Number Boxes, xProps=json string with all props
		// Builds a JSON object with the format {type:"numberBox",props:JSON_props} for the default label
		//-------------------------------------------------------------------------------------------
		//	var xProps={left:xLeft,top:xTop,width:xWidth,value:xValue,id:xId,name:xName,pattern:xPattern,invalidMessage:xInvalidMessage};
			var xWidth=(xProps["width"]==0) ? 100:xProps["width"];
			var xHeight=(xProps["height"]==0) ? 24:xProps["height"];

			var styleObj={
				"position": "absolute",
				"left"    :xProps["left"]+"px",
				"top"     :xProps["top"]+"px",
				"width"   :xWidth+"px",
				"height"  :xHeight+"px"		
			}
			var xTitle="NumberBox"+xNumberBoxOrder;	
			var xValue=(xProps["value"]=="@|") ? "123":xProps["value"];
			//var xPattern=(xProps["value"]=="@|") ? "0.######":xProps["pattern"];
			var xPattern=(xProps["value"]=="@|") ? "##########.###":xProps["pattern"];
			var	xName=(xProps["name"].length==0) ? xProps["id"]:xProps["name"];

			var props = {
				order	: xOrder,
				tabindex: xOrder,
				id      : xProps["id"],
				name    : xName,
				title   : xTitle,
				value   : xValue,
				preCode : xProps["preCode"],
				posCode : xProps["posCode"],
				invalidMessage: xProps["invalidMessage"],
				constraints: {pattern: xPattern},					//ex {pattern: "0.######"}, "{pattern: '+0.000;-0.000'}"
				//constraints:{min:-20000,max:20000,places:0},
				style   :styleObj,
				size    : "10"
			};	
			return {"type":"numberBox","props":props}	
		},	
		//-------------------------------------------------------------------------------------------
		JSON_Default_TextArea: function(xOrder,xTextAreaOrder,xProps){//Order within TextAreas,xProps
		//-------------------------------------------------------------------------------------------
		// Param: Order within Form, Order within TextAreas, xProps=json string with all props
		// Builds a JSON object with the format {type:"textArea",props:JSON_props} for the default textArea
		//-------------------------------------------------------------------------------------------
		//	var xProps={left:xLeft,top:xTop,width:xWidth,value:xValue,id:xId};
		//alert("Inside JSON_Default_TextArea -1 height="+xProps["height"]);

			xWidth=(xProps["width"]==0) ? 100:xProps["width"];
			xHeight=(xProps["height"]==0) ? 100:xProps["height"];
			var styleObj={
				"position": "absolute",
				"left"    :xProps["left"]+"px",
				"top"     :xProps["top"]+"px",
				"width"   :xWidth+"px",
				"height"  :xHeight+"px",
				"min-height"  :xHeight+"px",
				"overflow-y"  :"auto"
			}
		//alert("Inside JSON_Default_TextArea -2 height="+xHeight);
		//alert("Inside JSON_Default_TextArea -3 height="+styleObj.height);
		//alert("Inside JSON_Default_TextArea -4 min-height="+styleObj["min-height"]);
			
			var xTitle="TextArea"+xTextAreaOrder;	
			var xValue=(xProps["value"]=="@|") ? xTitle:xProps["value"];
			var xName=(xProps["name"].length==0) ? xProps["id"]:xProps["name"];

			var props = {
				order	: xOrder,
				tabindex: xTextAreaOrder,
				id      : xProps["id"],
				name    : xName,
				title   : xTitle,
				value   : xValue,
				preCode : xProps["preCode"],
				posCode : xProps["posCode"],
				style   :styleObj
				//readOnly:xReadOnly,
				//disabled:xDisabled,
				//size    : "10"
			};	
			return {"type":"textArea","props":props}	
		},
		//-------------------------------------------------------------------------------------------
		JSON_Default_CheckBox: function(xOrder,xCheckBoxOrder,xProps){//Order,Order within checkBoxes,xProps
		//-------------------------------------------------------------------------------------------
		// Param: Order within Form, Order within Checkboxes, xProps=json string with all props
		// Builds a JSON object with the format {type:"checkBox",props:JSON_props} for the default checkBox
		//-------------------------------------------------------------------------------------------
		//	var xProps={left:xLeft,top:xTop,checked:xChecked,value:xValue,id:xId};
			var styleObj={
				"position": "absolute",
				"left"    :xProps["left"]+"px",
				"top"     :xProps["top"]+"px",
				"width"   :"15px",
				"height"  :"15px"
			}	
			var xTitle=(xProps["title"]=="@|") ? "checkBox"+xCheckBoxOrder:xProps["title"];
			//var xTitle="CheckBox"+xCheckBoxOrder;	
			var xValue=(xProps["value"]=="@|") ? xTitle:xProps["value"];//if  xValue="@|" the tooltip will be the value - not for checkboxes
			var xName=(xProps["name"].length==0) ? xProps["id"]:xProps["name"];
			var props = {
				id      : xProps["id"],
				name    : xName,
				title   : xTitle,
				tabindex: xOrder,
				//disabled: false,
				style   : 	styleObj,
				changeCode : xProps["changeCode"],				
				label	: "checkBox Label",
				checked : xProps["checked"]
			};
			return {"type":"checkBox","props":props}	
		},
		//-------------------------------------------------------------------------------------------
		JSON_Default_DateTextBox: function(xOrder,xDateTextBoxOrder,xProps){//Order,Order within DateTextBoxes,xProps
		//-------------------------------------------------------------------------------------------
		// Param: Order within Form, Order within DateTextBoxes, xProps=json string with all props
		// Builds a JSON object with the format {type:"dateTextbox",props:JSON_props} for the default DateTextBox
		//-------------------------------------------------------------------------------------------
			var	xWidth=(xProps["width"]==0) ? 120:xProps["width"];
			var xHeight=(xProps["height"]==0) ? 24:xProps["height"];
			var styleObj={
				"position": "absolute",
				"left"    :xProps["left"]+"px",
				"top"     :xProps["top"]+"px",
				"width"   :xWidth+"px",
				"height"  :xHeight+"px"
			}
			var xTitle="DateTextBox"+xDateTextBoxOrder;	
			var xValue=(xProps["value"].length==0) ? "@|":xProps["value"]; //if value is not defined uses "@|"=>today
			var xValue=(xValue=="@|") ? eval("new Date()"):xValue;//returns a javascript Date object

			//xValue=dojo.date.locale.format(xValue,{datePattern:"yyyy-MM-dd",selector:"date"});//returns a string  loosing the javascript Date Object
			xValue=Locale.format(xValue,{datePattern:"yyyy-MM-dd",selector:"date"});//returns a string  loosing the javascript Date Object
			//xValue=dojo.date.locale.parse(xValue,{datePattern:"yyyy-MM-dd",selector:"date"});//reconstroi javascript Date object
			xValue=Locale.parse(xValue,{datePattern:"yyyy-MM-dd",selector:"date"});//reconstroi javascript Date object
			var xDatePattern=xProps["datePattern"]; //just for debbuging é 	"dd/MM/yyyy";
			//xProps["datePattern"]="EEEE, MMMM d yyyy";"d 'de' MMMM 'de' yyyy";//"MMM dd, yyyy";
			var xName=(xProps["name"].length==0) ? xProps["id"]:xProps["name"];

			var props = {
				order	: xOrder,
				id      : xProps["id"],
				name    : xName,
				title   : xTitle,
				tabindex: xOrder,
				openOnClick: false,
				preCode : xProps["preCode"],
				posCode : xProps["posCode"],
				//disabled:"disabled",
				style   :styleObj,
				value	:xValue,
				//preCode : xProps["preCode"],
				//posCode : xProps["posCode"],
				promptMessage:"",// "No spaces please !!!",
				//invalidMessage: "you are lost in time !!!",
				invalidMessage: xProps["invalidMessage"],//"",    //"You are lost in time !!!",
				missingMessage: xProps["missingMessage"],//"The value is required",  //message para qdo é required e não está preenchido
				//datePattern: "dd MMM, yyyy",
				constraints:{datePattern: xProps["datePattern"]},
				//required: true
				required: xProps["required"] //false
			};	
			return {"type":"dateTextBox","props":props}	
			//A dateTextBox is composed by one top div class - ex for node id="f6" with 3 chidren:
			//   top div node widgetid="f6" it has a full style description
			//   	   div node with innernode - just to support the dijitDownArrowButton 
			//				input class inner node
			//		   div dijitValidation Container with innernode
			//   	  		input class inner node - normally inactive - what is this for ? 
			//   	   div node with innernode - just to support the dijitDownArrowButton 
			//				input class with id="f6" is a 	dijitInputInner 
			// *** The popup content is placed at <body> level ***
			// top div node id="widget_f6_dropdown" is the popoup container
			//		table id="f6_popoup" is a container with a role=grid
			//			thead
			//			tbody
			//			tfoot
			//		iframe
		},
		//-------------------------------------------------------------------------------------------
		JSON_Default_Button: function(xOrder,xButtonOrder,xProps){//Order,Order within buttons,xProps
		//-------------------------------------------------------------------------------------------
		// Param: Order within Form, Order within Buttons, xProps=json string with all props
		// Builds a JSON object with the format {type:"button",props:JSON_props} for the default checkBox
		//-------------------------------------------------------------------------------------------
		//	{left:xLeft,top:xTop,width:xWidth,height:xHeight,value:xValue,id:xId,onClick:xOnClick,clickCode:xClickCode,disable:xDisable};
			//alert("Inside JSON_Default_Button -1 height="+xProps["height"]);
			var xValue=(xProps["value"].length==0) ? "Button":xProps["value"];
			var xWidth=(xProps["width"]==0) ? xValue.length*12:xProps["width"];
			var xHeight=(xProps["height"]==0) ? 24:xProps["height"];
			var xName=(xProps["name"].length==0) ? xProps["id"]:xProps["name"];
			var styleObj={
				"position": "absolute",
				"left"    :xProps["left"]+"px",
				"top"     :xProps["top"]+"px",
				"width"   :xWidth+"px",
				"height"  :xHeight+"px"	
			}
	 //   var xOnClick=(xProps["onClick"].length==0) ? function(){alert('Click behavior to be defined...');}:xProps["onClick"];
	 var xOnClick=xProps["onClick"];
			//if(xOnClick=="disable")
			//	xOnClick=""; 
			/*
			if(xProps["disable"]){
				//onClick=function(){;};
				alert("JSON_Default_Button disable=true");
			};
			*/
			//x1="abc"
			var xTitle="Button"+xButtonOrder;
			xValue=(xProps["value"]=="@|") ? xTitle:xProps["value"];
			var props = {
				order	: xOrder,
				id      : xProps["id"],
				name    : xName,
				title   : xTitle,
				tabindex: xOrder,
				value	: xValue, //not used by dojo. Only to be compatible in MotherLIb. If we ask 	var xVal=fx.fieldById("fx1").props.value; it will give the same as label. 
				label   : xValue,
				clickCode:xProps["clickCode"],
				onClick : xOnClick,  //xOnClick funciona c/ xOnClick="eval(bClick())";  //se disble=true não faz click
				disable :xProps["disable"], //JO if true onClick will be disabled - defaul=false;
				disabled :xProps["disabled"], //if true the whole button will be disabled - defaul=false;
				style   :styleObj
			};
			//A button is composed by 3 <SPAN> dom nodes in hierarchy - ex for node id="f7":
			//   top SPAN node widgetid="f7" it has a full style description
			//   	   SPAN node - just to support click event ondijitclick:_onClick
			//				SPAN node id="f7" style description exists but no width and no height
			//					SPAN to support icon (disabled if no icon)
			//					SPAN id=f7_label to support label 
			//by some reason styleObj is transmited only to top SPAN node. we need to introduce it in node id="f7"
			//this "adjustment" will be done in compensation() after widget is placed in DOM 
			return {"type":"button","props":props}	
		},
		//-------------------------------------------------------------------------------------------
		JSON_Default_Combo: function(xOrder,xComboOrder,xProps){//Order,Order within comboBoxes,xProps
		//-------------------------------------------------------------------------------------------
		// Param: Order within Form, Order within Combos, xProps=json string with all props
		// Builds a JSON object with the format {type:"comboBox",props:JSON_props} for the default ComboBox
		//-------------------------------------------------------------------------------------------
		//Note: ComboBox has a unique property ComboArr (the content to show) if empty the default item1, item2,item 3 will be used
		//      ComboBox array it is an array of JSONs...ex //xArr=[{name:"Joaquim"},{name:"Afonso"},{name:"Manel"}]; item is the JSON attribute to be shown
		// ex 	xArr=[{name:"Joaquim"},{name:"Afonso"},{name:"Manel"}];
		//		formDialog.addChild("comboBox",{left:9*xTitleLine2.length+20,top:20,value:"default para combox",width:xComboWidth,comboArr:xArr});
		// http://www.strickspage.com/blog/displaying-a-loading-message-while-fetching-dijit-form-combobox-dijit-form-filteringselect-options/
			var	xWidth=(xProps["width"]==0) ? 120:xProps["width"];
			var xHeight=(xProps["height"]==0) ? 24:xProps["height"];

			var styleObj={
				"position": "absolute",
				"left"    :xProps["left"]+"px",
				"top"     :xProps["top"]+"px",
				"width"   :xWidth+"px",
				"height"  :xHeight+"px"
			}	
			if(xProps["comboArr"]==""){
				var itemStore = new dojo.data.ItemFileReadStore({data: { identifier: "name",
					items: [
						{name:"item1"},
						{name:"item2"},
						{name:"item3"}
					]
				}}); 
			}else{
				var itemStore = new dojo.data.ItemFileReadStore({data: { identifier: "name",
					items: xProps["comboArr"],
					urlPreventCache:true,
					clearOnClose:true
				}}); 
			}
			var xName=(xProps["name"].length==0) ? xProps["id"]:xProps["name"];
			
			var xTitle=(xProps["title"]=="@|") ? "comboBox"+xComboOrder:xProps["title"];
			//alert("ComboBox="+xTitle);
			var xValue=(xProps["value"]=="@|") ? xTitle:xProps["value"];//if  xValue="@|" the tooltip will be the value 
			var xPlaceHolder=(xProps["placeHolder"].length==0) ? "Select an Item":xProps["placeHolder"];
			//var xTitle="comboBox"+xComboOrder;	
			//var xValue=(xProps["value"]=="@|") ? xTitle:xProps["value"];
			var props = {
				order	: xOrder,
				id      : xProps["id"],
			    name    : xName,
			    title   : xTitle,
				tabindex: xOrder,
				preCode : xProps["preCode"],
				posCode : xProps["posCode"],
				changeCode : xProps["changeCode"],
				//intermediateChanges: true,
				selectOnClick:true,
				style   :styleObj,
			    value	:xValue,
				placeHolder	: xPlaceHolder,  //o que aparece inicialmente dentro da combo                 
				store   : itemStore	
			};				
			return {"type":"comboBox","props":props}	
		},
		//-------------------------------------------------------------------------------------------
		JSON_Default_dgrid: function(xOrder,xGridOrder,xProps){//Order,Order within grids,xProps
		//-------------------------------------------------------------------------------------------
		// Builds a JSON object with the format {type:"label",props:JSON_props} for the default dGrid
		// Param: Order within Form,prefix for Id, left position ,top position, width, Order within Grids, , Layout Structure ([[Jason]])
		// returns:a JSON Object representing the Grid object
		//-------------------------------------------------------------------------------------------
		//  chamada
		// var xProps={left:xLeft,top:xTop,width:xWidth,height:xHeight,value:xValue,id:xId,name:xName,title:xTitle,preCode:xPreCode,posCode:xPosCode,changeCode:xChangeCode,comboArr:xComboArr};
		// JSON_var=this.JSON_Default_dgrid(xOrder,this.maxTot(xType),xProps);	//Order within Form, Order within Grids, xprops

			var	xWidth=(xProps["width"]==0) ? 200:xProps["width"];
			var xHeight=(xProps["height"]==0) ? 200:xProps["height"];
			var xName=(xProps["name"].length==0) ? xProps["id"]:xProps["name"];
			var styleObj={
				"position": "absolute",
				"left"    :xProps["left"]+"px",
				"top"     :xProps["top"]+"px",
				"width"   :xWidth+"px",
				"height"  :xHeight+"px",
				"font-size":"10px"
			};
			var xColumns={};//object to be filled with an array of objects by makeColumns
			var strCols=xProps["headers"];
			var strColTypes=xProps["colTypes"];
			var xShowId=xProps["showId"];
			var nCols=null;
			var xHeaderArr=strCols.split(",");//eventualy ""
			var xTypesArr=strColTypes.split(",");//eventually "". if the string strColTypes is empty split will produce [""]
			var xLenArr=[];//JSON_Default_dgrid will mount an array of int with the len of each column. If the column has no specified len len=-1
			//alert("JSON_Default_dgrid1 -->showId="+xShowId+" headers="+strCols+"< colTypes="+strColTypes+"< xHeaderArr.lenght="+xHeaderArr.length+"  xTypesArr.length="+xTypesArr.length);
			if(strCols.length>0 || strColTypes.length>0){//if it exists headers or colTypes
				if(strCols.length>0){
					nCols=xHeaderArr.length;
				}else{//there is no header, but colTypes exists. It will consider as many headers as there are colTypes...
					//alert("there is no header, but colTypes exists - cols="+xTypesArr.length);
					if(this.oDbg.isDbg("JSON_Default_dgrid")) this.oDbg.display("there is no header, but colTypes exists - cols="+xTypesArr.length);
					xHeaderArr=[];
					for(var i=0;i<xTypesArr.length;i++)
						xHeaderArr.push("col"+i);
					nCols=xHeaderArr.length;
				};
				this.makeColumns(xShowId,nCols,xColumns);//if showId=false, it jumps idCol - returns 	{idCol:{name:"idCol",label:"col0"},col1:{name:"col1",label:"col1","autoSave":"true","Editor":"text","editOn":"dblclick"},col2:{}..et{},}
				for(var i=0;i<nCols;i++){
					xLenArr[i]=-1;//the default...
					var xType="text";
					if(i<xTypesArr.length){
						//console.log("i="+i+" menor que "+xTypesArr.length);
						if(this.oDbg.isDbg("JSON_Default_dgrid")) this.oDbg.display("i="+i+" menor que "+xTypesArr.length);
						xType=xTypesArr[i];
						//console.log("xType="+xType+"<"+xType.length);
						if(this.oDbg.isDbg("JSON_Default_dgrid")) this.oDbg.display("xType="+xType+"<"+xType.length);
						if(xType.length==0) //this prevents the case of empty strColTypes, that will produce [""] with split
							xType="text";
					};
					var xPos=xType.indexOf("/");//eventually xType will have the form "<type>/<len>" ex "text/50"
					var xLen=null;
					if(xPos>=0){
						xLen=parseInt(xType.substring(xPos+1));
						xLenArr[i]=xLen;
						xType=xType.substring(0,xPos);
					};
					//console.log("vai chamar updateHeader i="+i+" xType="+xType+" len="+xLen);
					if(this.oDbg.isDbg("JSON_Default_dgrid")) this.oDbg.display("vai chamar updateHeader i="+i+" xType="+xType+" len="+xLen);
					this.updateHeader(i,xHeaderArr[i],xType,xColumns);	//console.log("actualizou header "+i+" com "+xHeaderArr[i]);
				};
				//alert("JSON_Default_dgrid2 -->idCol=xColumns.idCol.label"+" col1="+xColumns.col1.label+" col2="+xColumns.col2.label);
			}else{//nor headers nor ColTypes - we will atributte ncols
				nCols=parseInt(0.5+(xWidth/60));//this rounds to the closest integer
				this.makeColumns(xShowId,nCols,xColumns);//returns nCols columns idCol,col1,col2... coln etc...
			};
			var xDataArr=[];//array (matrix) to be filled with ("col"+i+","+j)
			if(!xShowId)
				nCols++;//add one column to makeData() if idCol is going to be hide
			this.makeData(6,nCols,xDataArr);//(nRows,nColumns,xDataArr);
			var memoryStore = new Memory({idProperty : "idCol",data: xDataArr});//make a store...
			var observer = new Observable(memoryStore);// create the initial Observable store
			//var gridQuery=function(line){return (line.idCol>=2 );}//&& line.idCol<25) ;				
			var props = {
				order	: xOrder,
				tb_order: xGridOrder,
				id      : xProps["id"],
				name    : xName,
				title   : "Grid"+xGridOrder,
				//preCode : xProps["preCode"],
				//posCode : xProps["posCode"],
				style   :styleObj,         
				store:memoryStore,
				columns:xColumns,
				lenArr:xLenArr,
				showId:xShowId,
				//query:gridQuery,
				selectionMode: "single", // "single" for Selection; only select a single row at a time - "multiple"
				cellNavigation: false, // for Keyboard; allow only row-level keyboard navigation
				rowSelector: '20px'
			};	
			//alert("saida de JSON_Default_dgrid left="+props.style.left+" top="+props.style.top+" width="+props.style.width+" height="+props.style.height);
			return {"type":"grid","props":props}
		},	
		//*/
		//-------------------------------------------------------------------------------------------
		JSON_Default_Tabs: function(xOrder,xTabsOrder,xProps){//Order,Order within tabs(s),xProps
		//-------------------------------------------------------------------------------------------
		// Param: Order within Form, xTabsOrder within tabs, xProps=json string with all props
		// Builds a JSON object with the format {type:"tabs",props:JSON_props} for the default Tab
		// returns:a JSON Object representing the TabContainer object
		//-------------------------------------------------------------------------------------------
		// Param: Order within Form, Order within Combos, xProps=json string with all props
		// Builds a JSON object with the format {type:"comboBox",props:JSON_props} for the default ComboBox

		//-------------------------------------------------------------------------------------------
		//http://dojotoolkit.org/documentation/tutorials/1.6/dijit_layout/ no final tem addTab
		//Um tab é: Um tab container ("dijit/layout/TabContainer") tc = new TabContainer({id:"centerCont",region: "center",tabPosition:"right"});
		// colocado em cima de um content Pane
		// o Tab container contêm vários Content Panes 	tab1 = new ContentPane({title: "Visual Form Builder"});
		//            									tab2 = new ContentPane({title: "Form Manager"});
		//												tab3 = new ContentPane({title: "Grid Properties"});
		//							tc.addChild( tab1 );
		//							tc.addChild( tab2 );
		//							tc.addChild( tab3 );
		//							bc.addChild(tc);
		// cada um dos content panes tab1,tab2,tab3 pode ter um form e vários widgets sobre esse form - ou widgets directos sobre o content pane
			//var tabContainer = new TabContainer({id:"f15",region: "center",tabPosition:"top"});
			//var tab1 = new ContentPane({title: "tab1"});
			//var tab2 = new ContentPane({title: "tab2"});
			//var tab3 = new ContentPane({title: "tab3"});
			//alert("ADDCHILD JSON_DEFAULT_TABS !!!");
			var	xWidth=(xProps["width"]==0) ? 230:xProps["width"];//minimum footPrint
			var	xHeight=(xProps["height"]==0) ? 70:xProps["height"];//minimum footPrint
			//alert("Inside JSON_DEFAULT_TABS-1 height="+xProps["height"]);

			var styleObj={
				"position": "absolute",
				"left"    :xProps["left"]+"px",
				"top"     :xProps["top"]+"px",
				"width"   :xWidth+"px",		
				"height"  :xHeight+"px",
				"border": "1px dotted silver",
				"display" :"block"
			};
			var xName=(xProps["name"].length==0) ? xProps["id"]:xProps["name"];
			var xTitle="tabs"+xTabsOrder;	
			var xValue=(xProps["value"]=="@|") ? xTitle:xProps["value"];
			var props = {
				order	: xOrder,
				id      : xProps["id"],
			    name    : xName,
			    title   : xTitle,
				tabindex: xOrder,
				preCode : xProps["preCode"],
				posCode : xProps["posCode"],
				style   :styleObj,
				//style: 'width:100px',
			    value	:xValue,
				isContainer:true,
				isLayoutContainer:true,
				doLayout:true,//if do layout is false, it will not respect heigth comming from user
				tabPosition:"top"
			};
			//alert("JSON_Default_Tabs !!!"+JSON.stringify(props.style));
			return {"type":"tabs","props":props}
		},//JSON_Default_Tabs
		//-----------------------------------------------------------------------------------------
		makeColumns:function(showId,xCols,xColumns){//used in JSON_Default_dgrid -> # of columns, JSON Object to return
		//-----------------------------------------------------------------------------------------
		//defines a flexible structure for dgrid columns 
		//	showId - (boolean) - True =>shows colId, False - hides colId, xCols - # of columns to show, xColumns - Output
		// xColumns (the output) is a JSON with an array of JSONs  {<field i>:<JSON for field i>}
		//json for field1=>{"name":"idCol","label":<label>}
		//json for fieldn - n>1=> {name:<"col"+n>,label:<label>,"autoSave":true,"editor":"text","editorOn":"dblclick"} - (if showId=false, it jumps idCol)
		// ex {idCol:{name:"idCol",label:"col0"},col1:{name:"col1",label:"col1","autoSave":"true","Editor":"text","editOn":"dblclick"},col2:{}..et{},}
		//https://github.com/SitePen/dgrid/wiki/Core-Components -->tem as props do column definition object 
			if(!showId)
				xCols++; //if it jumps idCol another column should be add - to respect the number of columns=xCols
			for(var j=0;j<xCols;j++){
				var xStrCol="col"+j;
				if(xStrCol=="col0"){
					if(showId){
						xStrCol="colId";
						xColumns.idCol={name:"idCol",label:"col0"};
					};
				}else{
					// should be the same as: {name:xStrCol,label:xStrCol,autoSave:"true",editor:"text",editOn:"dblclick"};
					xColumns[xStrCol]=Editor({name:xStrCol,label:xStrCol,autoSave:"true"}, "text", "dblclick");
					// translated to->xColumns[xStrCol]={name:xStrCol,label:xStrCol,"autoSave":"true","Editor":"text","editOn":"dblclick"};
					//xColumns[xStrCol]=Editor({name:xStrCol,label:xStrCol,widgetArgs:{value: '', constraints: {min: 1, max: 9}} },NumberTextBox, 'dblclick');
					//console.log("motherlib.makeColumns------>xColumns="+JSON.stringify(xColumns[xStrCol]));
				};
			};
			//console.log("motherlib.makeColumns------>xColumns="+JSON.stringify(xColumns));
		},
		//-----------------------------------------------------------------------------------------
		 updateHeader:function(xCol,xHeader,xType,xColumns){//used in JSON_Default_dgrid ->Changes the header of # col=xCol to text xHeader, and to type=xType for column object=xColumns 
		//-----------------------------------------------------------------------------------------
		// updateHeader(3,"Products","text",xColumns)
// xColumns - is a jason {<field 1 >:<json for field 1>, <field 2 >:<json for field 2>,... }
//json for field1=>{"name":"idCol","label":<label>}
//json for fieldn - n>1=> {name:<name>,label:<label>,"autoSave":true,"editor":"text","editorOn":"dblclick"}
		//xType:
		//   "text" simple html input text
		//	 "numberBox" - NumberTextBox widget
		//iterates thru xColumns object
			var j=0;
			for (var xProp in xColumns) { 
				if (xColumns.hasOwnProperty(xProp)) { //to assure that xProp is an actual property of an object, and doesn't come from the prototype
					if(j==xCol){
						//alert(xProp + " -> " + xColumns[xProp].label+" ->"+xHeader);
						switch(xType){
							case "text":
								xColumns[xProp].label=xHeader;
								xColumns[xProp].editor="text";//simple html text, checkbox,radio,password,button
								break;
							case "numberBox":
//xColumns[xProp]=Editor({name:xProp,label:xHeader,widgetArgs:{value: '', constraints: {min: 1, max: 99}} },NumberTextBox, 'dblclick');
xColumns[xProp]=Editor({name:xProp,label:xHeader,editorArgs:{value: '', constraints: {min: 1, max: 99}} },NumberTextBox, 'dblclick');
								break;
							case "comboBox":
								var itemStore = new dojo.data.ItemFileReadStore({data: { identifier: "name",
									items: [
										{name:"item1"},
										{name:"item2"},
										{name:"item3"}
									]
								}}); 									
//xColumns[xProp]=Editor({name:xProp,label:xHeader,widgetArgs:{value: 'test 1',store:itemStore}},ComboBox,'dblclick');
xColumns[xProp]=Editor({name:xProp,label:xHeader,editorArgs:{value: 'test 1',store:itemStore}},ComboBox,'dblclick');
								break;
							case "dateTextBox":
								//var xValue=eval("new Date()");//returns a javascript Date object
								var xValue=new Date();
								xValue=xValue.getFullYear()+"-0"+(xValue.getMonth()+1)+"-"+xValue.getDate();
								//alert("today is "+xValue);
								xValue=Locale.parse(xValue,{datePattern:"yyyy-MM-dd",selector:"date"});//reconstroi javascript Date object
//xColumns[xProp]=Editor({name:xProp,label:xHeader,widgetArgs:{value: xValue,constraints:"dd/MM/yyyy"}},DateTextBox,'dblclick');
xColumns[xProp]=Editor({name:xProp,label:xHeader,editorArgs:{value: xValue,constraints:{datePattern: "dd/MM/yyyy"}}},DateTextBox,'dblclick');
								break;

							default: alert("updateHeader: the type "+xType+" is unknown");	
						};		
						//xGrid.set('columns', xColumns);
					};
					j++;
				}; 
			};
		},			
		//-----------------------------------------------------------------------------------------
		makeData:function (xRows,xCols,xDataArr){//used in JSON_Default_dgrid -> builds a default matrix of # of rows x #cols, returning JSON Object= xDataArr
		//-----------------------------------------------------------------------------------------
		// fills an array of data for the memory store. each line of the array is a Json object 
		//	{ idCol: 1, col1:"col11",col2:"col12",col3:"col13"},..
		// the first column has always the property idCol:i (i is 1 for firt row, n for nth row
			var xJSON={};
			var	xArrEl=[];
			for(var i=0;i<xRows;i++){
				xJSON={};
				xArrEl=[];
				var xObj = null;
				var xStr = "{";
				for(var j=0;j<xCols;j++){
					xJSON={};
					if(j==0){
						xStr = xStr+'"idCol":'+(i+1); //the first column
					}else{
						var xVar="col"+(j);
						var xxVar="col"+(i+1)+","+(j);
						xStr=xStr+',"'+xVar+'":"'+xxVar+'"';
						//xJSON[xVar]=xxVar;
					};
					//console.log("i="+i+" j="+j+" -->"+xStr);
				};
				xStr=xStr+"}";
			//console.log("Linha i="+i+" ------>"+xStr);
				xObj = JSON.parse(xStr); //the reverse of stringify - use double quotes
				xDataArr.push(xObj);
				var xLog="";
				xLog=JSON.stringify(xDataArr[i]);
			//console.log("----------------->Linha="+(i+0)+"  -->"+xLog);
			};
		},//makeData
		// This code is to be inserted in the MotherLibC.js file, between the method makeData and the method test (at the end of the instantiable code for the class)
		  // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
		  // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ RADIO BUTTON GROUP functionality using dojo checkboxes @@@@@@@@@ Developed by MIG @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ INI
		  // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
		  /****
		  System to manage groups of checkbox to behave as a group of radio buttons. Every time a checkbox is clicked the event handler defined for it will call either 
		  setRadioButtonsByName or setRadioButtonsById passing the name or ID of the current widget and the name of the group of widgets.
		  The name of the group of widgets is defined using either defineRadioGroupByName or defineRadioGroupById.
		  Example:
		  //==========================
		  f0.defineRadioGroupByName("chkGroup01", ["CHK01","CHK02","CHK03"] ); // <<<@@@@@@@@@@@@@@@@@@@@@@@@
		  //=====================###############################################################
		  Now create the checkbox widgets and attach an event handler to each of them, using the changeCode object.
		  There, the func is defined as f0.setRadioButtonsByName and passed in parms, the name:"CHK01" (for example) and the name of the group "chkGroup01".
		  Here are the statements for 3 check boxes:
		  
		  f0.addChild("checkBox",{name:"CHK01" , left:480,top:10+5,title:"true/false for boolean isCreateDelTrueChild"
			, changeCode:{ func: f0.setRadioButtonsByName, theThis: f0, parms:{name:"CHK01", groupName: "chkGroup01"} } }  ); //8
		  f0.addChild("checkBox",{name:"CHK02" ,left:480,top:40+5,title:"true/false  for boolean isCreateNormalChildWithParent"
			 , changeCode:{ func: f0.setRadioButtonsByName, theThis: f0, parms:{name:"CHK02", groupName: "chkGroup01"} }  } ); //9
		  f0.addChild("checkBox",{name:"CHK03" ,left:480,top:70+5,title:"true/false  for boolean isCreateNormalChildWITHOUTParent"
			   , changeCode:{ func: f0.setRadioButtonsByName, theThis: f0, parms:{name:"CHK03", groupName: "chkGroup01"} } }); //10 
		  ---------------------------
		  UNFORTUNATELLY this is not qooxdoo but it is dojo which is firing events to be handled by the 3 different event handlers and as it is, dojo is calling the event handlers
		  not only of the checkbox where the user is clicking, but also the event handler of a different checkbox where the user DID NOT CLICK !!!!!!
		  I have noticed that calling setFieldPropsByName() programmatically is triggering the event handler of dojo, which SHOULD NOT HAPPEN !!! The event firing 
		  should only be triggered when the user CLICKS on the widget!!! Never when we programmatically set the value of the checkbox to TRUE or FALSE !!!!!!!
		  ----------------------------
		  
		  
		  **/
		  __radioGroups: {},
		  defineRadioGroupByName: function( sNameGroup , aNamesCheckWidgets ) {
		   if ( ! this.__radioGroups[sNameGroup] ) {
			this.__radioGroups[sNameGroup]= { aByName:null, aById:null };
		   }; // endifelse
		   this.__radioGroups[sNameGroup].aByName= aNamesCheckWidgets;
		  },
		  defineRadioGroupById: function( sNameGroup , aIdsCheckWidgets ) {
		   if ( ! this.__radioGroups[sNameGroup] ) {
			this.__radioGroups[sNameGroup]= { aByName:null, aById:null };
		   }; // endifelse
		   this.__radioGroups[sNameGroup].aById= aNamesCheckWidgets;
		  },
		  //---------
		  __setRadioButtons: function( sIdCurr, aAllIds  ) {
		   this.setFieldPropsByName( sIdCurr, {checked:true} );
		   var iLen=aAllIds.length;
		   // DojDebug.dbg("__setRadioButtons() nameChecked:=|" + sIdCurr +"| iLen=" + iLen );
		   for (var ii=0;ii<iLen; ii++) {
			var sId=aAllIds[ii];
			if ( ! (sId == sIdCurr) ) {
			 this.setFieldPropsByName( sId, {checked:false} );
			 // DojDebug.dbg("__setRadioButtons() name UNChecked:=|" + sId +"|" );
			}; //end if
		   };
		  },
		  //===============
		  setRadioButtonsByName: function( theParms  ) {
		   var dijitObj8=dijit.byId("f08");
		   var dijitObj9=dijit.byId("f09");
		   var dijitObj10=dijit.byId("f010");
		   //alert("*** ENTRANCE **** -->CHK01="+dijitObj8.get("checked")+" CHK02="+dijitObj9.get("checked")+" CHK03="+dijitObj10.get("checked"));

		  if(theParms.name=="CHK01"){
				//alert("CHK01");
				//dijitObj=new CheckBox(JSON_var.props,xId);
				//dijit.byId(xId).set("checked",xChecked); //converte o evento !!!

			   dijitObj8.set("checked",true);
			   dijitObj9.set("checked",false);
			   dijitObj10.set("checked",false);

			   //this.setFieldProps("f08", {checked:true} );
			   //this.setFieldProps("f09", {checked:false} );
			   //this.setFieldProps("f010", {checked:false} );
		  };
		  if(theParms.name=="CHK02"){
				//alert("CHK02");
			   dijitObj8.set("checked",false);
			   dijitObj9.set("checked",true);
			   dijitObj10.set("checked",false);
			   //this.setFieldProps("f08", {checked:false} );
			   //this.setFieldProps("f09", {checked:true} );
			   //this.setFieldProps("f010", {checked:false} );
		  };	
		  //alert("*** EXIT **** -->CHK01="+dijitObj8.get("checked")+" CHK02="+dijitObj9.get("checked")+" CHK03="+dijitObj10.get("checked"));
		  console.log("------------------------------------- "+theParms.name+" --------------------------------");
/*		   
		   var sCurrName= theParms.name;
		   var sNameGroup= theParms.groupName;
		   //DojDebug.dbg("setRadioButtonsByName() nameChecked:=|" + sCurrName +"| nameGroup=" + sNameGroup );
		   if (  this.__radioGroups[sNameGroup] ) {
			this.__setRadioButtons( sCurrName, this.__radioGroups[sNameGroup].aByName ) ;
		   }; // endifelse
*/		   
		  },
			//=============
		  setRadioButtonsById: function( sCurrId, sNameGroup  ) {
		   var sCurrId= theParms.id;
		   var sNameGroup= theParms.groupName;
		   if (  this.__radioGroups[sNameGroup] ) {
			this.__setRadioButtons( sCurrId, this.__radioGroups[sNameGroup].aById ) ;
		   }; // endifelse
		  },
		  // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
		  // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ RADIO BUTTON GROUP functionality using dojo checkboxes @@@@@@@@@ Developed by MIG @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ END
		  // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				

		test:function(x){
			alert("motherLib6 - TEST !!!! x="+x);
		}		
	}); //end of declare associative array, closing  of declare function
	//-----------------
	// Here STATIC methods and properties:
	//-----------------
	oClassName.property01=1234;
	oClassName.formNumber_of_last_CheckExist=-1;
	oClassName.checkExist= function(xId) {//checks the existence of form with prefix=xId - returning true/false
		//example: 
		//	if(FBuilder.checkExist("f2")){//checks if it exists a form with prefix xPrefix
		//		alert("F2 EXISTE E TEM DE SER DESTRUIDO");
		//	};
		var xExistingId=null;
		var totForms=oClassName.prototype.static.formCount;
		for(var i=0;i<=totForms;i++){
			xExistingId=oClassName.prototype.static.zarrForms[i];
			console.log("FBuilder.checkExist i="+i+" id="+xExistingId+" compares with "+xId);
			if(xExistingId==xId){ 
				console.log("FBuilder.checkExist match found at "+i+" MATCH id="+xExistingId);
				oClassName.formNumber_of_last_CheckExist=i;//this way this method can work stand alone and simultaneously support destroy()
				return true;
			};	
		};
		console.log("FBuilder.checkExist ----------------------------   exit with FALSE");
		return false;
	};
	oClassName.destroy= function(xId) {//destroy FBuilder FORM xId- destroy all widgets and cleans the DOM for Form with prefix=xId 
		//example:
		//   FBuilder.destroy("f2");//destroy the FBuilder form with prefix "f2" - it is a nop if the form is non existing
		oClassName.checkExist(xId);
		//Destroy all widgets for form xId
		if(oClassName.formNumber_of_last_CheckExist<0){
		    console.log("MotherLib6 - oClassName.destroy - YOU ARE TRYING TO DESTROY A NON EXISTENT FORM "+xId+" nothing will be done !");
		}else{
		    var currentFormNumber=oClassName.formNumber_of_last_CheckExist;
		    console.log("MotherLib6 - oClassName.destroy - FORM "+xId+" WITH CURRENTFORMNUMBER="+currentFormNumber+" VAI SER DESTRUIDO !!!!");
		    var xTotWidgets=oClassName.prototype.static.zarrObj[currentFormNumber].length;
		    console.log("MotherLib6 - oClassName.destroy - FORM "+xId+" HAS "+xTotWidgets+" WIDGETS !!!!");
			for(var i=0;i<xTotWidgets;i++){
				//var xId=arrObj[i].props.id;
				var xxId=oClassName.prototype.static.zarrObj[currentFormNumber][i].props.id;
				var xType=oClassName.prototype.static.zarrObj[currentFormNumber][i].type;
				console.log(i+"------------->vai destruir "+xxId+" do tipo="+xType);
				if(Registry.byId(xxId))
					Registry.byId(xxId).destroy();//destroy o widget enquanto dojo.destroy() só destroi o dom node
			}		   
			oClassName.prototype.static.zarrObj[this.currentFormNumber]=[]; //cleans the properties array	
			//arrWidgets=[]; //..e limpa arrWidgets
			oClassName.prototype.static.zarrWidgets[this.currentFormNumber]=[]; //cleans the widgets array	
			var formId=xId;
			if(Registry.byId(formId)){
				Registry.byId(formId).destroy();
				console.log("MotherLib6 - oClassName.destroy form "+formId);
			};				
			var contentPaneId=xId+"_PaneId";
			if(Registry.byId(contentPaneId)){
				Registry.byId(contentPaneId).destroy();
				console.log("MotherLib6 - oClassName.destroy destroy "+contentPaneId);
			};	
			var dialogId=xId+"_DialogId";
			if(Registry.byId(dialogId)){
				Registry.byId(dialogId).destroy();
				console.log("MotherLib6 - oClassName.destroy destroy "+dialogId);
			};			
			oClassName.prototype.static.zarrForms[currentFormNumber]=null;//frees the slot
		};
	};

	return oClassName;
}); //closing of codeblock for callback function & closing of define function	

